[{"/Users/jannunzi/webdev/quiz-maker/src/index.js":"1","/Users/jannunzi/webdev/quiz-maker/src/App.js":"2","/Users/jannunzi/webdev/quiz-maker/src/reportWebVitals.js":"3","/Users/jannunzi/webdev/quiz-maker/src/db-design/db-design.js":"4","/Users/jannunzi/webdev/quiz-maker/src/web-dev/web-dev.js":"5","/Users/jannunzi/webdev/quiz-maker/src/db-design/sql/create-table.js":"6","/Users/jannunzi/webdev/quiz-maker/src/db-design/sql/insert-random-rows.js":"7","/Users/jannunzi/webdev/quiz-maker/src/utils/utils.js":"8","/Users/jannunzi/webdev/quiz-maker/src/db-design/tables/table.js":"9","/Users/jannunzi/webdev/quiz-maker/src/db-design/query/join/fill-blanks/query-join-multiple-choice.js":"10","/Users/jannunzi/webdev/quiz-maker/src/db-design/query/join/fill-blanks/query-join-fill-blanks.js":"11","/Users/jannunzi/webdev/quiz-maker/src/db-design/query/join/fill-blanks/query-group-by-count-fill-blanks.js":"12","/Users/jannunzi/webdev/quiz-maker/src/db-design/insert/insert-into-values.js":"13","/Users/jannunzi/webdev/quiz-maker/src/db-design/insert/insert-into-columns.js":"14","/Users/jannunzi/webdev/quiz-maker/src/db-design/insert/insert-into-select.js":"15","/Users/jannunzi/webdev/quiz-maker/src/counter/react-state/counter-react-state.js":"16","/Users/jannunzi/webdev/quiz-maker/src/counter/react-state/up-component.js":"17","/Users/jannunzi/webdev/quiz-maker/src/counter/react-state/down-component.js":"18","/Users/jannunzi/webdev/quiz-maker/src/counter/react-state/counter-display.js":"19","/Users/jannunzi/webdev/quiz-maker/src/counter/redux-state/counter-redux.js":"20","/Users/jannunzi/webdev/quiz-maker/src/counter/redux-state/counter-up.js":"21","/Users/jannunzi/webdev/quiz-maker/src/counter/redux-state/counter-down.js":"22","/Users/jannunzi/webdev/quiz-maker/src/db-design/group-by/single-table/multiple-choice/group-by-single-table-multiple-choice.js":"23","/Users/jannunzi/webdev/quiz-maker/src/db-design/group-by/two-tables/multiple-choice/group-by-two-tables-multiple-min-max-choice.js":"24","/Users/jannunzi/webdev/quiz-maker/src/db-design/group-by/two-tables/multiple-choice/group-by-two-tables-multiple-count-choice.js":"25","/Users/jannunzi/webdev/quiz-maker/src/db-design/inline-views/true-false/inline-view-legal-true-false.js":"26","/Users/jannunzi/webdev/quiz-maker/src/db-design/utils/pk.js":"27","/Users/jannunzi/webdev/quiz-maker/src/db-design/utils/fk.js":"28","/Users/jannunzi/webdev/quiz-maker/src/db-design/group-by/uml-group-by-multiple-choice.js":"29","/Users/jannunzi/webdev/quiz-maker/src/db-design/utils/clazz.js":"30","/Users/jannunzi/webdev/quiz-maker/src/db-design/utils/class-diagram-horizontal.js":"31","/Users/jannunzi/webdev/quiz-maker/src/db-design/utils/association-horizontal.js":"32","/Users/jannunzi/webdev/quiz-maker/src/db-design/group-by/uml-group-by-multiple-choice-sum.js":"33","/Users/jannunzi/webdev/quiz-maker/src/db-design/normalization/first-normal-form.js":"34","/Users/jannunzi/webdev/quiz-maker/src/db-design/normalization/second-normal-form.js":"35","/Users/jannunzi/webdev/quiz-maker/src/db-design/normalization/third-normal-form.js":"36","/Users/jannunzi/webdev/quiz-maker/src/db-design/uml/text-to-uml.js":"37","/Users/jannunzi/webdev/quiz-maker/src/db-design/utils/diamond-shape.js":"38","/Users/jannunzi/webdev/quiz-maker/src/db-design/relational-algebra/symbol.js":"39","/Users/jannunzi/webdev/quiz-maker/src/db-design/relational-algebra/text.js":"40","/Users/jannunzi/webdev/quiz-maker/src/web-dev/widget-list/widget-list.js":"41","/Users/jannunzi/webdev/quiz-maker/src/web-dev/html/radio.js":"42","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/state/function/use-state/t.js":"43","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/state/class/state1.js":"44","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/state/redux/state-redux.js":"45","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/state/redux/counter.js":"46","/Users/jannunzi/webdev/quiz-maker/src/web-dev/es6/spreader/spreader-array.js":"47","/Users/jannunzi/webdev/quiz-maker/src/web-dev/es6/spreader/spreader-object.js":"48","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/state/class/state-class-prev-state.js":"49","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/class/props.js":"50","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/function/return/return.js":"51","/Users/jannunzi/webdev/quiz-maker/src/web-dev/es6/map/map1.js":"52","/Users/jannunzi/webdev/quiz-maker/src/web-dev/es6/filter/filter.js":"53","/Users/jannunzi/webdev/quiz-maker/src/web-dev/html/labels.js":"54","/Users/jannunzi/webdev/quiz-maker/src/web-dev/html/labels-and-radios.js":"55","/Users/jannunzi/webdev/quiz-maker/src/web-dev/html/placeholder.js":"56","/Users/jannunzi/webdev/quiz-maker/src/web-dev/html/title.js":"57","/Users/jannunzi/webdev/quiz-maker/src/web-dev/html/value.js":"58","/Users/jannunzi/webdev/quiz-maker/src/web-dev/html/textarea.js":"59","/Users/jannunzi/webdev/quiz-maker/src/web-dev/css/color-and-bg-color.js":"60","/Users/jannunzi/webdev/quiz-maker/src/web-dev/routing/routing-navigation.js":"61","/Users/jannunzi/webdev/quiz-maker/src/web-dev/routing/add.js":"62","/Users/jannunzi/webdev/quiz-maker/src/web-dev/routing/subtract.js":"63","/Users/jannunzi/webdev/quiz-maker/src/web-dev/routing/nav1.js":"64","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongo/mongo-find-all.js":"65"},{"size":696,"mtime":1615210474334,"results":"66","hashOfConfig":"67"},{"size":8676,"mtime":1618967544805,"results":"68","hashOfConfig":"67"},{"size":362,"mtime":1612038465266,"results":"69","hashOfConfig":"67"},{"size":4039,"mtime":1618967512257,"results":"70","hashOfConfig":"67"},{"size":2622,"mtime":1615515756626,"results":"71","hashOfConfig":"67"},{"size":1398,"mtime":1612051420468,"results":"72","hashOfConfig":"67"},{"size":1527,"mtime":1612051770369,"results":"73","hashOfConfig":"67"},{"size":8386,"mtime":1618968375657,"results":"74","hashOfConfig":"67"},{"size":1224,"mtime":1612130548569,"results":"75","hashOfConfig":"67"},{"size":6784,"mtime":1612121722675,"results":"76","hashOfConfig":"67"},{"size":5223,"mtime":1612123131454,"results":"77","hashOfConfig":"67"},{"size":5769,"mtime":1612132450607,"results":"78","hashOfConfig":"67"},{"size":1698,"mtime":1613708606362,"results":"79","hashOfConfig":"67"},{"size":1930,"mtime":1613709183021,"results":"80","hashOfConfig":"67"},{"size":4737,"mtime":1613711035475,"results":"81","hashOfConfig":"67"},{"size":676,"mtime":1614022389829,"results":"82","hashOfConfig":"67"},{"size":242,"mtime":1614022188816,"results":"83","hashOfConfig":"67"},{"size":248,"mtime":1614022247326,"results":"84","hashOfConfig":"67"},{"size":343,"mtime":1614023059802,"results":"85","hashOfConfig":"67"},{"size":997,"mtime":1614023033977,"results":"86","hashOfConfig":"67"},{"size":165,"mtime":1614022765042,"results":"87","hashOfConfig":"67"},{"size":169,"mtime":1614022780194,"results":"88","hashOfConfig":"67"},{"size":2237,"mtime":1614660698072,"results":"89","hashOfConfig":"67"},{"size":3004,"mtime":1614895327289,"results":"90","hashOfConfig":"67"},{"size":2852,"mtime":1614895509564,"results":"91","hashOfConfig":"67"},{"size":2682,"mtime":1614899342956,"results":"92","hashOfConfig":"67"},{"size":140,"mtime":1614899160954,"results":"93","hashOfConfig":"67"},{"size":119,"mtime":1614899100103,"results":"94","hashOfConfig":"67"},{"size":10783,"mtime":1614909064464,"results":"95","hashOfConfig":"67"},{"size":1545,"mtime":1614906007859,"results":"96","hashOfConfig":"67"},{"size":1097,"mtime":1614906568882,"results":"97","hashOfConfig":"67"},{"size":2336,"mtime":1614926627236,"results":"98","hashOfConfig":"67"},{"size":10028,"mtime":1614916771029,"results":"99","hashOfConfig":"67"},{"size":2166,"mtime":1614919217084,"results":"100","hashOfConfig":"67"},{"size":1506,"mtime":1614920195553,"results":"101","hashOfConfig":"67"},{"size":1500,"mtime":1614920649292,"results":"102","hashOfConfig":"67"},{"size":4631,"mtime":1614925559029,"results":"103","hashOfConfig":"67"},{"size":346,"mtime":1614921773242,"results":"104","hashOfConfig":"67"},{"size":2286,"mtime":1614946343737,"results":"105","hashOfConfig":"67"},{"size":1928,"mtime":1614947073343,"results":"106","hashOfConfig":"67"},{"size":4224,"mtime":1615212454909,"results":"107","hashOfConfig":"67"},{"size":1124,"mtime":1615355240714,"results":"108","hashOfConfig":"67"},{"size":980,"mtime":1615353182202,"results":"109","hashOfConfig":"67"},{"size":2467,"mtime":1615380602126,"results":"110","hashOfConfig":"67"},{"size":4348,"mtime":1615396291776,"results":"111","hashOfConfig":"67"},{"size":450,"mtime":1615381729952,"results":"112","hashOfConfig":"67"},{"size":1328,"mtime":1615398781373,"results":"113","hashOfConfig":"67"},{"size":2813,"mtime":1615401285472,"results":"114","hashOfConfig":"67"},{"size":2652,"mtime":1615435304406,"results":"115","hashOfConfig":"67"},{"size":2377,"mtime":1615437830755,"results":"116","hashOfConfig":"67"},{"size":1819,"mtime":1615438668420,"results":"117","hashOfConfig":"67"},{"size":1419,"mtime":1615500160797,"results":"118","hashOfConfig":"67"},{"size":1823,"mtime":1615501578154,"results":"119","hashOfConfig":"67"},{"size":1527,"mtime":1615501919023,"results":"120","hashOfConfig":"67"},{"size":2054,"mtime":1615502934756,"results":"121","hashOfConfig":"67"},{"size":1774,"mtime":1615503655616,"results":"122","hashOfConfig":"67"},{"size":1733,"mtime":1615504234147,"results":"123","hashOfConfig":"67"},{"size":1523,"mtime":1615504767419,"results":"124","hashOfConfig":"67"},{"size":2278,"mtime":1615505268801,"results":"125","hashOfConfig":"67"},{"size":1156,"mtime":1615508309405,"results":"126","hashOfConfig":"67"},{"size":1288,"mtime":1615514923702,"results":"127","hashOfConfig":"67"},{"size":226,"mtime":1615513837493,"results":"128","hashOfConfig":"67"},{"size":236,"mtime":1615513863112,"results":"129","hashOfConfig":"67"},{"size":1068,"mtime":1615516441908,"results":"130","hashOfConfig":"67"},{"size":1423,"mtime":1618968301371,"results":"131","hashOfConfig":"67"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"135"},"1985n3l",{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"135"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"135"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"135"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"135"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"135"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"135"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"135"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"135"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"135"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"135"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"135"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"135"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"135"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"135"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"135"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"135"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"135"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"135"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"135"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"135"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"135"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"135"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"135"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"135"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/jannunzi/webdev/quiz-maker/src/index.js",["288","289"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport CounterReactState from \"./counter/react-state/counter-react-state\";\nimport CounterRedux from \"./counter/redux-state/counter-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["290","291"],"/Users/jannunzi/webdev/quiz-maker/src/App.js",["292","293"],"/Users/jannunzi/webdev/quiz-maker/src/reportWebVitals.js",[],"/Users/jannunzi/webdev/quiz-maker/src/db-design/db-design.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/web-dev.js",[],"/Users/jannunzi/webdev/quiz-maker/src/db-design/sql/create-table.js",[],"/Users/jannunzi/webdev/quiz-maker/src/db-design/sql/insert-random-rows.js",[],"/Users/jannunzi/webdev/quiz-maker/src/utils/utils.js",[],"/Users/jannunzi/webdev/quiz-maker/src/db-design/tables/table.js",[],"/Users/jannunzi/webdev/quiz-maker/src/db-design/query/join/fill-blanks/query-join-multiple-choice.js",[],"/Users/jannunzi/webdev/quiz-maker/src/db-design/query/join/fill-blanks/query-join-fill-blanks.js",["294","295","296","297"],"import React from 'react'\nimport CreateTableSql from \"../../../sql/create-table\";\nimport InsertRandomRowsSql from \"../../../sql/insert-random-rows\";\nimport Table from \"../../../tables/table\";\nimport {randomStringCapitalized, randomInt, randomData, join} from \"../../../../utils/utils\";\n\nconst DbDesignQueryJoinFillBlanks = () => {\n  const randomTableNameA = randomStringCapitalized(2);\n  const randomTableNameB = randomStringCapitalized(2);\n\n  const randomRenameA = randomStringCapitalized(2);\n  const randomRenameB = randomStringCapitalized(2);\n  const randomRenamea = randomStringCapitalized(2);\n  const randomRenameb = randomStringCapitalized(2);\n\n  const schemaA = {\n    schemaName: 'QUIZ_MAKER',\n    tableName: randomTableNameA,\n    columns: [\n      {\n        name: `${randomTableNameA}ID`,\n        type: 'INT',\n        primaryKey: true,\n        autoIncrement: true,\n        notNull: true\n      },\n      {\n        name: `${randomTableNameA}1`,\n        type: 'VARCHAR',\n        size: 45\n      },\n      {\n        name: `${randomTableNameA}2`,\n        type: 'INT'\n      },\n      {\n        name: `${randomTableNameA}3`,\n        type: 'FLOAT'\n      }\n    ]\n  }\n  const schemaB = {\n    schemaName: 'QUIZ_MAKER',\n    tableName: randomTableNameB,\n    columns: [\n      {\n        name: `${randomTableNameB}ID`,\n        type: 'INT',\n        primaryKey: true,\n        autoIncrement: true,\n        notNull: true\n      },\n      {\n        name: `${randomTableNameB}1`,\n        type: 'VARCHAR',\n        size: 45\n      },\n      {\n        name: `${randomTableNameB}2`,\n        type: 'INT'\n      },\n      {\n        name: `${randomTableNameB}3`,\n        type: 'FLOAT'\n      },\n      {\n        name: `${randomTableNameA}ID`,\n        type: 'INT',\n        foreignKey: true,\n        referencesTable: randomTableNameA,\n        referencesField: `${randomTableNameA}ID`\n      }\n    ]\n  }\n  const randomPk1 = randomInt(1000)\n  const randomPk2 = randomInt(1000)\n  const randomPk3 = randomInt(1000)\n  const randomPk4 = randomInt(1000)\n  const randomPk5 = randomInt(1000)\n  let values = {}\n  values[`${randomTableNameA}ID`] = [randomPk1, randomPk2, randomPk3, randomPk4, randomPk5]\n  let tableDataA = randomData({\n    schema: schemaA,\n    values,\n    rowCount: 5\n  })\n  values = {}\n  values[`${randomTableNameA}ID`] = [randomPk1, randomPk1, randomPk2, randomPk2]\n  let tableDataB = randomData({\n    schema: schemaB,\n    values,\n    rowCount: 5\n  })\n  const joinedTable = join({\n    tableA: {data: tableDataA, schema: schemaA},\n    tableB: {data: tableDataB, schema: schemaB},\n    joinFieldA: `${randomTableNameA}ID`,\n    joinFieldB: `${randomTableNameA}ID`,\n    project: [\n      {table: randomTableNameA, field: `${randomTableNameA}1`},\n      {table: randomTableNameB, field: `${randomTableNameB}1`},\n      ]\n  })\n  console.log(joinedTable)\n  return (\n    <>\n      <h2>DB Design Query Join Fill Blanks</h2>\n      <div id=\"question\">\n        <p>Consider the following data for tables {randomTableNameA} and {randomTableNameB}</p>\n        <table style={{width: \"100%\"}}>\n          <tbody>\n          <tr>\n            <td>\n              <Table schema={schemaA} tableData={tableDataA}/>\n            </td>\n            <td>\n              <Table schema={schemaB} tableData={tableDataB}/>\n            </td>\n          </tr>\n          </tbody>\n        </table>\n        <p>Fill in the blanks below to produce the following output</p>\n        <Table schema={joinedTable.schema} tableData={joinedTable.tableData}/>\n        <hr/>\n        <div>\n          SELECT [{randomTableNameA}].B1, {randomTableNameB}.[{randomTableNameB}1]<br/>\n          FROM {randomTableNameA} [JOIN] [{randomTableNameB}]<br/>\n          ON [{randomTableNameA}].{randomTableNameA}ID = {randomTableNameB}.[{randomTableNameA}ID];\n          <hr/>\n        </div>\n      </div>\n      <div id=\"answers\">\n      </div>\n      <div className=\"row\">\n        <div className=\"col-6\">\n          <br/>-- create table {randomTableNameA}<br/>\n          <CreateTableSql schema={schemaA}/>\n          <br/>-- insert into {randomTableNameA}<br/>\n          <InsertRandomRowsSql schema={schemaA} tableData={tableDataA}/>\n          <br/>-- create table {randomTableNameB}<br/>\n          <CreateTableSql schema={schemaB}/>\n          <br/>-- insert into {randomTableNameB}<br/>\n          <InsertRandomRowsSql schema={schemaB} tableData={tableDataB}/>\n          <br/>-- retrieve all records from left table<br/>\n          SELECT *<br/>\n          FROM {randomTableNameA};\n          <br/>\n          <br/>\n          -- retrieve all records from right table<br/>\n          SELECT *<br/>\n          FROM {randomTableNameB};\n          <br/>\n          <br/>\n          -- correct answer<br/>\n          SELECT {randomTableNameA}.{randomTableNameA}1, {randomTableNameB}.{randomTableNameB}1<br/>\n          FROM {randomTableNameA} JOIN {randomTableNameB}<br/>\n          ON {randomTableNameA}.{randomTableNameA}ID = {randomTableNameB}.{randomTableNameA}ID;<br/>\n          <br/>\n          -- drop tables<br/>\n          DROP TABLE {randomTableNameA};<br/>\n          DROP TABLE {randomTableNameB};<br/>\n\n        </div>\n        <div className=\"col-6\">\n        </div>\n      </div>\n\n    </>\n  )\n}\n\nexport default DbDesignQueryJoinFillBlanks\n","/Users/jannunzi/webdev/quiz-maker/src/db-design/query/join/fill-blanks/query-group-by-count-fill-blanks.js",["298","299","300","301"],"import React from 'react'\nimport CreateTableSql from \"../../../sql/create-table\";\nimport InsertRandomRowsSql from \"../../../sql/insert-random-rows\";\nimport Table from \"../../../tables/table\";\nimport {randomStringCapitalized, randomInt, randomData, join, groupByCount} from \"../../../../utils/utils\";\n\nconst DbDesignQueryGroupByCountFillBlanks = () => {\n  const randomTableNameA = randomStringCapitalized(2);\n  const randomTableNameB = randomStringCapitalized(2);\n\n  const randomRenameA = randomStringCapitalized(2);\n  const randomRenameB = randomStringCapitalized(2);\n  const randomRenamea = randomStringCapitalized(2);\n  const randomRenameb = randomStringCapitalized(2);\n\n  const schemaA = {\n    schemaName: 'QUIZ_MAKER',\n    tableName: randomTableNameA,\n    rowColors: [\"#bbffbb\",\"#bbbbff\", \"#ffbbbb\"],\n    columns: [\n      {\n        name: `${randomTableNameA}ID`,\n        type: 'INT',\n        primaryKey: true,\n        autoIncrement: true,\n        notNull: true\n      },\n      {\n        name: `${randomTableNameA}1`,\n        type: 'VARCHAR',\n        size: 45\n      },\n      {\n        name: `${randomTableNameA}2`,\n        type: 'INT'\n      },\n      {\n        name: `${randomTableNameA}3`,\n        type: 'FLOAT'\n      }\n    ]\n  }\n  const schemaB = {\n    schemaName: 'QUIZ_MAKER',\n    tableName: randomTableNameB,\n    rowColors: [\"#bbffbb\",\"#bbbbff\",\"#bbbbff\",\"#ffbbbb\",\"#ffbbbb\",\"#ffbbbb\"],\n    columns: [\n      {\n        name: `${randomTableNameB}ID`,\n        type: 'INT',\n        primaryKey: true,\n        autoIncrement: true,\n        notNull: true\n      },\n      {\n        name: `${randomTableNameB}1`,\n        type: 'VARCHAR',\n        size: 45\n      },\n      {\n        name: `${randomTableNameB}2`,\n        type: 'INT'\n      },\n      {\n        name: `${randomTableNameB}3`,\n        type: 'FLOAT'\n      },\n      {\n        name: `${randomTableNameA}ID`,\n        type: 'INT',\n        foreignKey: true,\n        referencesTable: randomTableNameA,\n        referencesField: `${randomTableNameA}ID`\n      }\n    ]\n  }\n  const randomPk1 = randomInt(1000)\n  const randomPk2 = randomInt(1000)\n  const randomPk3 = randomInt(1000)\n  const randomPk4 = randomInt(1000)\n  const randomPk5 = randomInt(1000)\n  let values = {}\n  values[`${randomTableNameA}ID`] = [randomPk1, randomPk2, randomPk3, randomPk4, randomPk5, randomInt(1000),randomInt(1000)]\n  let tableDataA = randomData({\n    schema: schemaA,\n    values,\n    rowCount: 7\n  })\n  values = {}\n  values[`${randomTableNameA}ID`] = [randomPk1, randomPk2, randomPk2, randomPk3, randomPk3, randomPk3, randomInt(1000)]\n  const rowColors = [\"#bbffbb\",\"#bbbbff\", \"#ffbbbb\"]\n  let tableDataB = randomData({\n    schema: schemaB,\n    values,\n    rowCount: 7\n  })\n  const group = groupByCount({\n    tableA: {data: tableDataA, schema: schemaA},\n    tableB: {data: tableDataB, schema: schemaB},\n    groupByField: `${randomTableNameA}ID`,\n    renameA: randomRenameA,\n    renameB: randomRenameB\n  })\n  // console.log(group)\n  return (\n    <>\n      <h2>DB Design Query Group By Count Fill Blanks</h2>\n      <h3>GROUP_BY_COUNT_FILL_BLANKS_</h3>\n      <div id=\"question\">\n        <p>Consider the following data for tables {randomTableNameA} and {randomTableNameB}</p>\n        <table style={{width: \"100%\"}}>\n          <tbody>\n          <tr>\n            <td>\n              <Table schema={schemaA} tableData={tableDataA}/>\n            </td>\n            <td>\n              <Table schema={schemaB} tableData={tableDataB}/>\n            </td>\n          </tr>\n          </tbody>\n        </table>\n        <p>Fill in the blanks below to produce the following output</p>\n        <Table schema={group.schema} tableData={group.tableData}/>\n        <hr/>\n        <div style={{wordSpacing: \"20px\", fontSize: \"1.2em\", fontWeight: \"bold\"}}>\n          SELECT {randomTableNameB}.[{randomTableNameA}ID_1] AS {randomRenameA},<br/>\n          [COUNT]([{randomTableNameA}_2].[{randomTableNameA}ID_3]) AS [{randomRenameB}_4]<br/>\n          FROM {randomTableNameA}, {randomTableNameB}<br/>\n          WHERE {randomTableNameA}.{randomTableNameA}ID = {randomTableNameB}.{randomTableNameA}ID<br/>\n          [GROUP] [BY] [{randomTableNameA}_5].[{randomTableNameA}ID_6];<br/>\n          <hr/>\n        </div>\n      </div>\n      <div id=\"answers\">\n      </div>\n      <div className=\"row\">\n        <div className=\"col-6\">\n          <br/>-- create table {randomTableNameA}<br/>\n          <CreateTableSql schema={schemaA}/>\n          <br/>-- insert into {randomTableNameA}<br/>\n          <InsertRandomRowsSql schema={schemaA} tableData={tableDataA}/>\n          <br/>-- create table {randomTableNameB}<br/>\n          <CreateTableSql schema={schemaB}/>\n          <br/>-- insert into {randomTableNameB}<br/>\n          <InsertRandomRowsSql schema={schemaB} tableData={tableDataB}/>\n          <br/>-- retrieve all records from left table<br/>\n          SELECT *<br/>\n          FROM {randomTableNameA};\n          <br/>\n          <br/>\n          -- retrieve all records from right table<br/>\n          SELECT *<br/>\n          FROM {randomTableNameB};\n          <br/>\n          <br/>\n          -- correct answer<br/>\n          SELECT {randomTableNameB}.{randomTableNameA}ID AS {randomRenameA},<br/>\n          COUNT({randomTableNameA}.{randomTableNameA}ID) AS {randomRenameB}<br/>\n          FROM {randomTableNameA}, {randomTableNameB}<br/>\n          WHERE {randomTableNameA}.{randomTableNameA}ID = {randomTableNameB}.{randomTableNameA}ID<br/>\n          GROUP BY {randomTableNameA}.{randomTableNameA}ID;<br/>\n          <br/>\n          -- drop tables<br/>\n          DROP TABLE {randomTableNameA};<br/>\n          DROP TABLE {randomTableNameB};<br/>\n\n        </div>\n        <div className=\"col-6\">\n        </div>\n      </div>\n\n    </>\n  )\n}\n\nexport default DbDesignQueryGroupByCountFillBlanks\n","/Users/jannunzi/webdev/quiz-maker/src/db-design/insert/insert-into-values.js",["302"],"import React from 'react';\nimport {randomData, randomStringCapitalized} from \"../../utils/utils\";\nimport Table from \"../tables/table\";\n\nexport default () => {\n    const randomTableNameA = randomStringCapitalized(2);\n    const schemaA = {\n        schemaName: 'QUIZ_MAKER',\n        tableName: randomTableNameA,\n        columns: [\n            {\n                name: `${randomTableNameA}ID`,\n                type: 'INT',\n                primaryKey: true,\n                autoIncrement: true,\n                notNull: true\n            },\n            {\n                name: `${randomTableNameA}1`,\n                type: 'VARCHAR',\n                size: 45\n            },\n            {\n                name: `${randomTableNameA}2`,\n                type: 'INT'\n            },\n            {\n                name: `${randomTableNameA}3`,\n                type: 'FLOAT'\n            }\n        ]\n    };\n    let tableDataA = randomData({\n        schema: schemaA,\n        rowCount: 3\n    });\n    let tableDataB = randomData({\n        schema: schemaA,\n        rowCount: 1\n    });\n\n    return(\n        <>\n            <h2>DB Design Insert Into Values</h2>\n            <div>\n            Consider the following table {randomTableNameA}:\n            <br/>\n            <br/>\n            <Table schema={schemaA} tableData={tableDataA}/>\n                Fill in the blanks below to insert a new record that looks like this:\n            <br/>\n            <br/>\n            <Table schema={schemaA} tableData={tableDataB}/>\n            INSERT [INTO] {randomTableNameA} [VALUES]<br/>\n            ([{tableDataB[0][0]}], [{tableDataB[0][1]}], [{tableDataB[0][2]}], [{tableDataB[0][3]}])\n\n            </div>\n        </>\n    )\n}\n","/Users/jannunzi/webdev/quiz-maker/src/db-design/insert/insert-into-columns.js",["303"],"import React from 'react';\nimport {randomData, randomStringCapitalized} from \"../../utils/utils\";\nimport Table from \"../tables/table\";\n\nexport default () => {\n    const randomTableNameA = randomStringCapitalized(2);\n    const schemaA = {\n        schemaName: 'QUIZ_MAKER',\n        tableName: randomTableNameA,\n        columns: [\n            {\n                name: `${randomTableNameA}ID`,\n                type: 'INT',\n                primaryKey: true,\n                autoIncrement: true,\n                notNull: true\n            },\n            {\n                name: `${randomTableNameA}1`,\n                type: 'VARCHAR',\n                size: 45\n            },\n            {\n                name: `${randomTableNameA}2`,\n                type: 'INT'\n            },\n            {\n                name: `${randomTableNameA}3`,\n                type: 'FLOAT'\n            }\n        ]\n    };\n    let tableDataA = randomData({\n        schema: schemaA,\n        rowCount: 3\n    });\n    let tableDataB = randomData({\n        schema: schemaA,\n        rowCount: 1\n    });\n\n    return(\n        <>\n            <h2>DB Design Insert Into Columns</h2>\n            <div>\n            Consider the following table {randomTableNameA}:\n            <br/>\n            <br/>\n            <Table schema={schemaA} tableData={tableDataA}/>\n                Fill in the blanks below to insert a new record that looks like this:\n            <br/>\n            <br/>\n            <Table schema={schemaA} tableData={tableDataB}/>\n                INSERT [INTO] {randomTableNameA}<br/>\n                (\n                [{schemaA.columns[0].name}],\n                [{schemaA.columns[1].name}],\n                [{schemaA.columns[2].name}],\n                [{schemaA.columns[3].name}])<br/>\n                [VALUES]<br/>\n                ([{tableDataB[0][0]}], [{tableDataB[0][1]}], [{tableDataB[0][2]}], [{tableDataB[0][3]}])\n            </div>\n        </>\n    )\n}\n","/Users/jannunzi/webdev/quiz-maker/src/db-design/insert/insert-into-select.js",["304"],"import React from 'react';\nimport {randomData, randomStringCapitalized} from \"../../utils/utils\";\nimport Table from \"../tables/table\";\n\nexport default () => {\n    const randomTableNameA = randomStringCapitalized(2);\n    const randomTableNameB = randomStringCapitalized(2);\n    const randomTableNameC = randomStringCapitalized(2);\n    const schemaA = {\n        schemaName: 'QUIZ_MAKER',\n        tableName: randomTableNameA,\n        columns: [\n            {\n                name: `${randomTableNameA}ID`,\n                type: 'INT',\n                primaryKey: true,\n                autoIncrement: true,\n                notNull: true\n            },\n            {\n                name: `${randomTableNameA}1`,\n                type: 'VARCHAR',\n                size: 45\n            },\n            {\n                name: `${randomTableNameA}2`,\n                type: 'INT'\n            },\n            {\n                name: `${randomTableNameA}3`,\n                type: 'FLOAT'\n            }\n        ]\n    };\n    const schemaB = {\n        schemaName: 'QUIZ_MAKER',\n        tableName: randomTableNameB,\n        columns: [\n            {\n                name: `${randomTableNameB}ID`,\n                type: 'INT',\n                primaryKey: true,\n                autoIncrement: true,\n                notNull: true\n            },\n            {\n                name: `${randomTableNameB}1`,\n                type: 'VARCHAR',\n                size: 45\n            },\n            {\n                name: `${randomTableNameB}2`,\n                type: 'INT'\n            },\n            {\n                name: `${randomTableNameB}3`,\n                type: 'FLOAT'\n            }\n        ]\n    };\n    const schemaC = {\n        schemaName: 'QUIZ_MAKER',\n        tableName: randomTableNameC,\n        columns: [\n            {\n                name: `${randomTableNameC}ID`,\n                type: 'INT',\n                primaryKey: true,\n                autoIncrement: true,\n                notNull: true\n            },\n            {\n                name: `${randomTableNameC}1`,\n                type: 'VARCHAR',\n                size: 45\n            },\n            {\n                name: `${randomTableNameC}2`,\n                type: 'INT'\n            },\n            {\n                name: `${randomTableNameC}3`,\n                type: 'FLOAT'\n            }\n        ]\n    };\n    let tableDataA = randomData({\n        schema: schemaA,\n        rowCount: 3\n    });\n    let tableDataB = randomData({\n        schema: schemaB,\n        rowCount: 3\n    });\n    let tableDataC = randomData({\n        schema: schemaC,\n        rowCount: 3\n    });\n\n    return(\n        <>\n            <h2>DB Design Insert Into Select</h2>\n            <div>\n            Consider the following tables {randomTableNameA}, {randomTableNameB}, and {randomTableNameC}:\n            <br/>\n            <br/>\n\n            <table>\n                <tr>\n                    <td>\n                        <Table schema={schemaA} tableData={tableDataA}/>\n                    </td>\n                    <td>\n\n                    </td>\n                    <td>\n                        <Table schema={schemaB} tableData={tableDataB}/>\n                    </td>\n                    <td>\n\n                    </td>\n                    <td>\n                        <Table schema={schemaC} tableData={tableDataC}/>\n                    </td>\n                </tr>\n            </table>\n                Fill in the blanks below to copy records from {randomTableNameB} and {randomTableNameC} into {randomTableNameA}.<br/>\n                All primary keys are auto generated and should be left to the database to figure out their\n                value when creating new records.<br/>\n                Do not insert primary keys since these are auto generated.<br/>\n                Fill in the column names below in the same order as shown above.<br/>\n                Copy the first two columns of {randomTableNameA} from the first two columns of {randomTableNameB} and the last column from {randomTableNameC}.<br/>\n                Ignore the WHERE clause.\n            <br/>\n            <br/>\n            INSERT [INTO] {randomTableNameA}<br/>\n            (\n                [{schemaA.columns[1].name}],\n                [{schemaA.columns[2].name}],\n                [{schemaA.columns[3].name}]\n            )<br/>\n            SELECT\n            (\n                [{schemaB.columns[1].name}] AS [{schemaA.columns[1].name}_1],\n                [{schemaB.columns[2].name}] [AS] {schemaA.columns[2].name},\n                {schemaC.columns[3].name} [AS_1] [{schemaA.columns[3].name}_1]\n            )<br/>\n            FROM {randomTableNameB}, {randomTableNameC}<br/>\n            WHERE ...\n            </div>\n        </>\n    )\n}\n","/Users/jannunzi/webdev/quiz-maker/src/counter/react-state/counter-react-state.js",[],"/Users/jannunzi/webdev/quiz-maker/src/counter/react-state/up-component.js",["305"],"import React from 'react'\n\nexport default class UpComponent extends React.Component {\n    constructor(props){\n        super(props)\n    }\n    render() {\n        return(\n            <button onClick={this.props.up}>Up</button>\n        )\n    }\n}\n","/Users/jannunzi/webdev/quiz-maker/src/counter/react-state/down-component.js",["306"],"import React from 'react'\n\nexport default class DownComponent extends React.Component {\n    constructor(props){\n        super(props)\n    }\n    render() {\n        return(\n            <button onClick={this.props.down}>Down</button>\n        )\n    }\n}\n","/Users/jannunzi/webdev/quiz-maker/src/counter/react-state/counter-display.js",["307"],"import React from 'react'\nimport {connect} from 'react-redux'\n\nclass CounterDisplay extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <h1>Count: {this.props.counter}</h1>\n        );\n    }\n}\n\nexport default connect((state) => ({counter: state.counter}))(CounterDisplay)\n","/Users/jannunzi/webdev/quiz-maker/src/counter/redux-state/counter-redux.js",[],"/Users/jannunzi/webdev/quiz-maker/src/counter/redux-state/counter-up.js",[],"/Users/jannunzi/webdev/quiz-maker/src/counter/redux-state/counter-down.js",[],"/Users/jannunzi/webdev/quiz-maker/src/db-design/group-by/single-table/multiple-choice/group-by-single-table-multiple-choice.js",["308","309","310","311"],"import React from 'react'\nimport {randomArray, randomData, randomFruitSet, randomSet, randomStringCapitalized, fruits} from \"../../../../utils/utils\";\n\nconst GroupBySingleTableMultipleChoice = () => {\n    const array = randomArray()\n    const randomFruits = randomSet(5, array)\n    console.log(randomFruits)\n    const randomTableNameA = randomFruits[0];//randomStringCapitalized(2);\n    const randomFieldA = randomFruits[1];//randomStringCapitalized(4);\n    const randomFieldB = randomFruits[2];//randomStringCapitalized(4);\n    const randomFieldC = randomFruits[3];//randomStringCapitalized(4);\n    const randomFieldD = randomFruits[4];//randomStringCapitalized(4);\n    return(\n        <>\n            <h3>Group By Single Table Multiple Choice</h3>\n            <p>\n            Consider the following schema:\n                <br/>\n                <br/>\n                <b>{randomTableNameA}({randomFieldA}, {randomFieldB}, {randomFieldC}, {randomFieldD})</b>\n                <br/>\n                <br/>\n            Select the statement that best implements the following query\n                <br/>\n                <br/>\n                <b>\"The sum of all {randomFieldB} per {randomFieldD}\"</b>\n            </p>\n            <br/>\n            <input type=\"radio\"/>\n            <br/>\n            SELECT {randomFieldD}, SUM({randomFieldB})\n            &nbsp;FROM {randomTableNameA}\n            &nbsp;GROUP BY {randomFieldD}\n            <br/>\n            <br/>\n            <input type=\"radio\"/>\n            <br/>\n            SELECT {randomFieldD}, SUM({randomFieldD})\n            &nbsp;FROM {randomTableNameA}\n            &nbsp;GROUP BY {randomFieldB}\n            <br/>\n            <br/>\n            <input type=\"radio\"/>\n            <br/>\n            SELECT {randomFieldA}, {randomFieldD}, SUM({randomFieldB})\n            &nbsp;FROM {randomTableNameA}\n            &nbsp;GROUP BY {randomFieldD}\n            <br/>\n            <br/>\n            <input type=\"radio\"/>\n            <br/>\n            SELECT {randomFieldA}, {randomFieldD}, SUM({randomFieldD})\n            &nbsp;FROM {randomTableNameA}\n            &nbsp;GROUP BY {randomFieldB}\n            <br/>\n            <br/>\n        </>\n    )\n}\n\nexport default GroupBySingleTableMultipleChoice","/Users/jannunzi/webdev/quiz-maker/src/db-design/group-by/two-tables/multiple-choice/group-by-two-tables-multiple-min-max-choice.js",["312","313","314","315"],"import React from 'react'\nimport {randomArray, randomData, randomFruitSet, randomSet, randomStringCapitalized, fruits} from \"../../../../utils/utils\";\n\nconst GroupByTwoTablesMultipleMinMaxChoice = () => {\n    \n    const array = randomArray()\n    const randomFruits = randomSet(9, array)\n    const tableA = randomFruits[0];\n    const tableApk = randomFruits[1];\n    const tableAfield1 = randomFruits[2];\n    const tableAfield2 = randomFruits[3];\n\n    const tableB = randomFruits[4];\n    const tableBpk = randomFruits[5];\n    const tableBfield1 = randomFruits[6];\n\n    const tableArename = randomFruits[7];\n    const tableBrename = randomFruits[8];\n    return(\n        <>\n            <h3>Group By Two Tables Min Max Multiple Choice</h3>\n            <p>\n            Consider the following schema:\n                <br/>\n                <br/>\n                {tableA}(<b>{tableApk}</b> (pk), {tableAfield1}, {tableAfield2})\n                <br/>\n                {tableB}(<b>{tableBpk}</b> (pk), {tableBfield1}, <u><i>{tableApk}</i></u> (fk))\n                <br/>\n                <br/>\n            Select the statement that best implements the following query\n                <br/>\n                <br/>\n                <b>\"What are min and max {tableAfield1}, per {tableApk}\"</b>\n            </p>\n            <input type=\"radio\" checked={true}/>\n                <br/>\n                SELECT {tableArename}.{tableApk}, MIN({tableArename}.{tableAfield1}), MAX({tableArename}.{tableAfield1})\n                <br/>\n                FROM {tableA} {tableArename}\n                <br/>\n                GROUP BY {tableArename}.{tableApk}\n                <br/>\n                <br/>\n            <input type=\"radio\"/>\n                <br/>\n                SELECT {tableArename}.{tableApk}, {tableArename}.{tableAfield1}, MIN({tableArename}.{tableAfield1}), MAX({tableArename}.{tableAfield1})\n                <br/>\n                FROM {tableA} {tableArename}\n                <br/>\n                GROUP BY {tableArename}.{tableApk}\n                <br/>\n                <br/>\n            <input type=\"radio\"/>\n            <br/>\n                SELECT {tableArename}.{tableApk}, MIN({tableArename}.{tableAfield1}), MAX({tableArename}.{tableAfield1})\n                <br/>\n                FROM {tableB} {tableArename}\n                <br/>\n                GROUP BY {tableArename}.{tableApk}\n                <br/>\n                <br/>\n            <input type=\"radio\"/>\n                <br/>\n                SELECT {tableArename}.{tableApk}, {tableBrename}.{tableBfield1} MIN({tableArename}.{tableAfield1}), MAX({tableArename}.{tableAfield1})\n                <br/>\n                FROM {tableA} {tableArename}, {tableB} {tableBrename}\n                <br/>\n                WHERE {tableArename}.{tableApk} = {tableBrename}.{tableApk}\n                <br/>\n                GROUP BY {tableArename}.{tableApk}\n                <br/>\n                <br/>\n        </>\n    )\n}\n\nexport default GroupByTwoTablesMultipleMinMaxChoice","/Users/jannunzi/webdev/quiz-maker/src/db-design/group-by/two-tables/multiple-choice/group-by-two-tables-multiple-count-choice.js",["316","317","318","319"],"import React from 'react'\nimport {randomArray, randomData, randomFruitSet, randomSet, randomStringCapitalized, fruits} from \"../../../../utils/utils\";\n\nconst GroupByTwoTablesMultipleCountChoice = () => {\n    \n    const array = randomArray()\n    const randomFruits = randomSet(9, array)\n    const tableA = randomFruits[0];\n    const tableApk = randomFruits[1];\n    const tableAfield1 = randomFruits[2];\n    const tableAfield2 = randomFruits[3];\n\n    const tableB = randomFruits[4];\n    const tableBpk = randomFruits[5];\n    const tableBfield1 = randomFruits[6];\n\n    const tableArename = randomFruits[7];\n    const tableBrename = randomFruits[8];\n    return(\n        <>\n            <h3>Group By Two Tables Count Multiple Choice</h3>\n            <p>\n            Consider the following schema:\n                <br/>\n                <br/>\n                {tableA}(<b>{tableApk}</b> (pk), {tableAfield1}, {tableAfield2})\n                <br/>\n                {tableB}(<b>{tableBpk}</b> (pk), {tableBfield1}, <u><i>{tableApk}</i></u> (fk))\n                <br/>\n                <br/>\n            Select the statement that best implements the following query\n                <br/>\n                <br/>\n                <b>\"How many {tableAfield1}, per {tableApk}\"</b>\n            </p>\n            <input type=\"radio\" checked={true}/>\n                <br/>\n                SELECT {tableArename}.{tableApk}, COUNT({tableArename}.{tableAfield1})\n                <br/>\n                FROM {tableA} {tableArename}\n                <br/>\n                GROUP BY {tableArename}.{tableApk}\n                <br/>\n                <br/>\n            <input type=\"radio\"/>\n                <br/>\n                SELECT {tableArename}.{tableApk}, {tableArename}.{tableAfield1}, COUNT({tableArename}.{tableAfield1})\n                <br/>\n                FROM {tableA} {tableArename}\n                <br/>\n                GROUP BY {tableArename}.{tableApk}\n                <br/>\n                <br/>\n            <input type=\"radio\"/>\n            <br/>\n                SELECT {tableArename}.{tableApk}, COUNT({tableArename}.{tableAfield1})\n                <br/>\n                FROM {tableB} {tableArename}\n                <br/>\n                GROUP BY {tableArename}.{tableApk}\n                <br/>\n                <br/>\n            <input type=\"radio\"/>\n                <br/>\n                SELECT {tableArename}.{tableApk}, {tableBrename}.{tableBfield1} COUNT({tableArename}.{tableAfield1})\n                <br/>\n                FROM {tableA} {tableArename}, {tableB} {tableBrename}\n                <br/>\n                WHERE {tableArename}.{tableApk} = {tableBrename}.{tableApk}\n                <br/>\n                GROUP BY {tableArename}.{tableApk}\n                <br/>\n                <br/>\n        </>\n    )\n}\n\nexport default GroupByTwoTablesMultipleCountChoice","/Users/jannunzi/webdev/quiz-maker/src/db-design/inline-views/true-false/inline-view-legal-true-false.js",["320","321","322","323","324","325"],"import React from 'react'\nimport {\n    randomArray,\n    randomData,\n    randomFruitSet,\n    randomSet,\n    randomStringCapitalized,\n    fruits, work,\n    education, aggregationFunctions\n} from \"../../../utils/utils\";\nimport {Link} from \"react-router-dom\";\nimport Pk from \"../../utils/pk\"\nimport Fk from \"../../utils/fk\"\n\nconst InlineViewLegalTrueFalse = () => {\n    // const array = randomArray();\n    const randomStrings = randomSet(10, work);\n    const studentTable = randomStrings[0];\n    const studentId = randomStrings[1];\n    const studentName = randomStrings[2];\n\n    const sectionTable = randomStrings[3];\n    const sectionId = randomStrings[4];\n    const sectionName = randomStrings[5];\n\n    const enrollmentTable = randomStrings[6];\n    const enrollmentId = randomStrings[7];\n    const enrollmentGrade = randomStrings[8];\n    \n    const randomStrings2 = randomSet(9, education);\n    const viewName = randomStrings2[0];\n    const enrollmentTableRename = randomStrings2[1];\n    const aggregationRename = randomStrings2[2];\n    const gradeValue = randomStrings2[3];\n    \n    const randomAggregations = randomSet(2, aggregationFunctions);\n    const aggregation1 = randomAggregations[0];\n    const aggregation2 = randomAggregations[1];\n\n    return(\n        <>\n            <h3>Inline Views Legal True False</h3>\n            <p>\n            Consider the following schema:\n                <br/>\n                <br/>\n                {studentTable}(<Pk name={studentId}/>, {studentName})\n                <br/>\n                {sectionTable}(<Pk name={sectionId}/>, {sectionName})\n                <br/>\n                {enrollmentTable}(<Pk name={enrollmentId}/>, <Fk name={studentId}/>, <Fk name={sectionId}/>, {enrollmentGrade})\n                <br/>\n                <br/>\n                Is the following query legal?\n                <br/>\n                <br/>\n                SELECT {viewName}.scid\n                <br/>\n                FROM\n                <div style={{marginLeft: \"20px\"}}>\n                    (SELECT {enrollmentTableRename}.{sectionId}, {aggregation1}({enrollmentTableRename}.{enrollmentId}) as {aggregationRename}\n                    <br/>\n                    FROM {enrollmentTable} {enrollmentTableRename}\n                    <br/>\n                    WHERE {enrollmentTableRename}.{enrollmentGrade} = '{gradeValue}'\n                    <br/>\n                    GROUP BY {enrollmentTableRename}.{sectionId}) {viewName}\n                </div>\n                WHERE {viewName}.{aggregationRename} = {aggregation2}({viewName}.{aggregationRename})\n                <br/>\n            </p>\n        </>\n    )\n}\n\nexport default InlineViewLegalTrueFalse\n// 265641","/Users/jannunzi/webdev/quiz-maker/src/db-design/utils/pk.js",[],"/Users/jannunzi/webdev/quiz-maker/src/db-design/utils/fk.js",[],"/Users/jannunzi/webdev/quiz-maker/src/db-design/group-by/uml-group-by-multiple-choice.js",["326","327","328","329"],"import React from 'react'\nimport Clazz from \"../utils/clazz\";\nimport ClassDiagramHorizontal from \"../utils/class-diagram-horizontal\";\nimport {education, randomSet, work} from \"../../utils/utils\";\nimport AssociationHorizontal from \"../utils/association-horizontal\";\nconst UmlGroupByMultipleChoice = () => {\n\n    const randomStrings = randomSet(18, work);\n    const randomStrings2 = randomSet(16, education);\n    const departmentClass = randomStrings[0];//\"department\";//randomStrings[0]\n    const courseClass = randomStrings[1];//\"course\";//randomStrings[1]\n    const sectionClass = randomStrings[2];//\"section\";//randomStrings[2]\n    const enrollmentClass = randomStrings[3];//\"enrollment\";//randomStrings[3]\n    const studentClass = randomStrings[4];//\"student\";//randomStrings[4]\n    const zipClass = randomStrings[5];//\"zip\";//randomStrings[5]\n    \n    const departmentId = randomStrings[6];//\"did\";// randomStrings2[0];\n    const departmentName = randomStrings[7];//\"name\";    \n    \n    const courseId = randomStrings[8];//\"cid\";\n    const courseTitle = randomStrings[9];//\"title\";\n    const courseCredits = randomStrings[10];//\"credits\";\n        \n    const sectionId = randomStrings[11];//\"scid\";\n    const sectionBuilding = randomStrings[12];//\"building\";\n    const sectionRoom = randomStrings[13];//\"room\";\n    const sectionTime = randomStrings[14];//\"time\";\n    \n    const enrollmentId = randomStrings[15];//\"eid\";\n    const enrollmentSemester = randomStrings[16];//\"semester\";\n    const enrollmentEnrolled = randomStrings[17];//\"enrolled\";\n    const enrollmentGrade = randomStrings2[14];//\"grade\";\n\n    const studentId = randomStrings2[0];//\"sid\";\n    const studentLast = randomStrings2[1];//\"last\";\n    const studentFirst = randomStrings2[2];//\"first\";\n    const studentAddress = randomStrings2[3];//\"address\";\n    const studentGrade = randomStrings2[4];//\"grade\";\n    \n    const zipId = randomStrings2[5];//\"zip\";\n    const zipCity = randomStrings2[6];//\"city\";\n    const zipState = randomStrings2[7];//\"state\";\n    \n    const CS5200 = randomStrings2[8];//\"CS5200\";\n    const Spring2015 = randomStrings2[9];//\"Spring2015\";\n    \n    const studentRename = randomStrings2[10];//\"s\";\n    const sectionRename = randomStrings2[11];//\"s\";\n    const enrollmentRename = randomStrings2[12];//\"e\";\n    const courseRename = randomStrings2[13];//\"c\";\n    \n    return(\n        <div>\n            <h1>UML Group By Multiple Choice</h1>\n            <div id=\"questionABC\">\n                Consider the following UML diagram\n                <br/>\n                <br/>\n\n                <ClassDiagramHorizontal\n                associations={[\n                    <AssociationHorizontal\n                        left={{cardinality: 1}}\n                        right={{cardinality: \"*\"}}/>,\n                    <AssociationHorizontal\n                        left={{cardinality: 1}}\n                        right={{cardinality: \"*\"}}/>,\n                    <AssociationHorizontal\n                        left={{cardinality: 1}}\n                        right={{cardinality: \"*\"}}/>,\n                    <AssociationHorizontal\n                        left={{cardinality: \"*\"}}\n                        right={{cardinality: 1}}/>,\n                ]}\n                classes={[\n                    <Clazz clazzName={departmentClass}\n                           fields={[\n                               {name: departmentId, pk: true},\n                               {name: departmentName}\n                           ]}/>,\n                    <Clazz clazzName={courseClass}\n                           fields={[\n                               {name: courseId, pk: true},\n                               {name: courseTitle},\n                               {name: courseCredits},\n                               {name: departmentId, fk: true},\n                           ]}/>,\n                    <Clazz clazzName={sectionClass}\n                           fields={[\n                               {name: sectionId, pk: true},\n                               {name: sectionBuilding},\n                               {name: sectionRoom},\n                               {name: sectionTime},\n                               {name: courseId, fk: true},\n                           ]}/>,\n                    <Clazz clazzName={enrollmentClass}\n                           fields={[\n                               {name: enrollmentId, pk: true},\n                               {name: sectionId, fk: true},\n                               {name: studentId, fk: true},\n                               {name: enrollmentSemester},\n                               {name: enrollmentEnrolled},\n                               {name: enrollmentGrade},\n                           ]}/>,\n                    <Clazz clazzName={studentClass}\n                           fields={[\n                               {name: studentId, pk: true},\n                               {name: studentLast},\n                               {name: studentFirst},\n                               {name: studentAddress},\n                               {name: studentGrade},\n                           ]}/>,\n                ]}\n            />\n            <div style={{clear: \"both\"}}>\n                <br/>\n                Which of the SQL statements below best implements\n                the following query\n                <br/>\n                <br/>\n\n                Which <span style={{textTransform: \"uppercase\"}}>{studentClass}</span>(s) got the highest\n                &nbsp;{studentGrade} for a <span style={{textTransform: \"uppercase\"}}>{courseClass}</span>'s\n                &nbsp;{courseTitle} is \"{CS5200}\" and <span style={{textTransform: \"uppercase\"}}>{enrollmentClass}</span>'s\n                &nbsp;{enrollmentSemester} is \"{Spring2015}\"?\n                <br/>\n                &nbsp;List the <span style={{textTransform: \"uppercase\"}}>{studentClass}</span>'s primary key,\n                &nbsp;{studentFirst}, {studentLast}, and {studentGrade}\n            </div>\n            </div>\n            <div id=\"answersABC\">\n                <hr/>\n                SELECT {studentRename}.{studentId}, {studentRename}.{studentFirst}, {studentRename}.{studentLast}, {studentRename}.{studentGrade}\n                <br/>\n                FROM <span style={{textTransform: \"uppercase\"}}>{studentClass}</span> {studentRename}\n                <br/>\n                WHERE {studentRename}.{studentGrade} = (SELECT MAX({enrollmentRename}.{enrollmentGrade})\n                <br/>\n                FROM <span style={{textTransform: \"uppercase\"}}>{enrollmentClass}</span> {enrollmentRename},\n                &nbsp;<span style={{textTransform: \"uppercase\"}}>{sectionClass}</span> {sectionRename},\n                &nbsp;<span style={{textTransform: \"uppercase\"}}>{courseClass}</span> {courseRename}\n                <br/>\n                WHERE {enrollmentRename}.{sectionId} = {sectionRename}.{sectionId}\n                <br/>\n                AND {sectionRename}.{courseId} = {courseRename}.{courseId}\n                <br/>\n                AND {courseRename}.{courseTitle}='{CS5200}'\n                <br/>\n                AND {enrollmentRename}.{enrollmentSemester}='{Spring2015}')\n                \n                <hr/>\n                \n                SELECT {studentRename}.{studentId}, {studentRename}.{studentFirst}, {studentRename}.{studentLast}, {studentRename}.{studentGrade}\n                <br/>\n                FROM <span style={{textTransform: \"uppercase\"}}>{studentClass}</span> {studentRename}\n                <br/>\n                WHERE {studentRename}.{studentGrade} = (SELECT MAX({enrollmentRename}.{enrollmentGrade})\n                <br/>\n                FROM <span style={{textTransform: \"uppercase\"}}>{enrollmentClass}</span> {enrollmentRename}, <span style={{textTransform: \"uppercase\"}}>{sectionClass}</span> {sectionRename}, <span style={{textTransform: \"uppercase\"}}>{courseClass}</span> {courseRename}\n                <br/>\n                WHERE {enrollmentRename}.{sectionId} = {sectionRename}.{sectionId}\n                <br/>\n                AND {sectionRename}.{courseId} = {courseRename}.{courseId}\n                <br/>\n                AND {courseRename}.{courseTitle}='{CS5200}'\n                <br/>\n                AND {enrollmentRename}.{enrollmentSemester}='{Spring2015}'\n                <br/>\n                GROUP BY {sectionRename}.{sectionId})\n                \n                <hr/>\n                \n                SELECT {studentRename}.{studentId}, {studentRename}.{studentFirst}, {studentRename}.{studentLast}, {studentRename}.{studentGrade}\n                <br/>\n                FROM <span style={{textTransform: \"uppercase\"}}>{studentClass}</span> {studentRename}\n                <br/>\n                WHERE {studentRename}.{studentGrade} = (SELECT MAX({enrollmentRename}.{enrollmentGrade})\n                <br/>\n                FROM <span style={{textTransform: \"uppercase\"}}>{enrollmentClass}</span> {enrollmentRename}, <span style={{textTransform: \"uppercase\"}}>{sectionClass}</span> {sectionRename}\n                <br/>\n                WHERE {enrollmentRename}.{sectionId} = {sectionRename}.{sectionId}\n                <br/>\n                AND {sectionRename}.{courseId} = <span style={{textTransform: \"uppercase\"}}>{courseClass}</span>.{courseId}\n                <br/>\n                AND <span style={{textTransform: \"uppercase\"}}>{courseClass}</span>.{courseTitle}='{CS5200}'\n                <br/>\n                AND {enrollmentRename}.{enrollmentSemester}='{Spring2015}')\n\n                <hr/>\n                SELECT {studentRename}.{studentId}, {studentRename}.{studentFirst}, {studentRename}.{studentLast}, {studentRename}.{studentGrade}\n                <br/>\n                FROM <span style={{textTransform: \"uppercase\"}}>{studentClass}</span> {studentRename}\n                <br/>\n                WHERE {studentRename}.{studentGrade} = (SELECT MAX({enrollmentRename}.{enrollmentGrade})\n                <br/>\n                FROM <span style={{textTransform: \"uppercase\"}}>{enrollmentClass}</span> {enrollmentRename}, <span style={{textTransform: \"uppercase\"}}>{courseClass}</span> {courseRename}\n                <br/>\n                WHERE {enrollmentRename}.{sectionId} = <span style={{textTransform: \"uppercase\"}}>{sectionClass}</span>.{sectionId}\n                <br/>\n                AND <span style={{textTransform: \"uppercase\"}}>{sectionClass}</span>.{courseId} = {courseRename}.{courseId}\n                <br/>\n                AND {courseRename}.{courseTitle}='{CS5200}'\n                <br/>\n                AND {enrollmentRename}.{enrollmentSemester}='{Spring2015}')\n\n                <hr/>\n                \n                \n            </div>\n        </div>\n    )\n}\nexport default UmlGroupByMultipleChoice","/Users/jannunzi/webdev/quiz-maker/src/db-design/utils/clazz.js",[],"/Users/jannunzi/webdev/quiz-maker/src/db-design/utils/class-diagram-horizontal.js",[],"/Users/jannunzi/webdev/quiz-maker/src/db-design/utils/association-horizontal.js",[],"/Users/jannunzi/webdev/quiz-maker/src/db-design/group-by/uml-group-by-multiple-choice-sum.js",["330"],"import React from 'react'\nimport Clazz from \"../utils/clazz\";\nimport ClassDiagramHorizontal from \"../utils/class-diagram-horizontal\";\nimport {destinations, education, randomArrayElement, randomInt, randomSet, work} from \"../../utils/utils\";\nimport AssociationHorizontal from \"../utils/association-horizontal\";\nconst UmlGroupByMultipleSum = () => {\n\n    const randomStrings = randomSet(18, work);\n    const randomStrings2 = randomSet(16, education);\n    \n    const airlineClass      = randomStrings[0].toUpperCase();//\"airline\";//randomStrings[0];//\"airline\";//randomStrings[0]\n    const flightClass       = randomStrings[1].toUpperCase();//\"flight\";//randomStrings[1];//\"flight\";//randomStrings[1]\n    const reservationClass  = randomStrings[2].toUpperCase();//\"reservation\";\n    const ticketClass       = randomStrings[3].toUpperCase();//\"ticket\";//randomStrings[3];//\"ticket\";//randomStrings[3]\n    const passengerClass    = randomStrings[4];//\"passenger\";//randomStrings[4];//\"passenger\";//randomStrings[4]\n    \n    const airlineId         = randomStrings[5];//\"aid\";//randomStrings[6];//\"did\";// randomStrings2[0];\n    const airlineName       = randomStrings[6];//\"name\";//randomStrings[7];//\"name\";    \n    \n    const flightId          = randomStrings[7];//\"fid\";//randomStrings[8];//\"cid\";\n    const flightType        = randomStrings[8];//\"type\";//randomStrings[9];//\"title\";\n    const flightSource      = randomStrings[9];//\"source\";//randomStrings[10];//\"credits\";\n    const flightDestination = randomStrings[10];//\"destination\";//randomStrings[10];//\"credits\";\n    const flightDuration    = randomStrings[11];//\"duration\";//randomStrings[10];//\"credits\";\n        \n    const reservationId     = randomStrings[12];//\"rid\";//randomStrings[11];//\"scid\";\n    const reservationBookingAgent = randomStrings[13];//\"bookingAgent\";//randomStrings[12];//\"building\";\n    const reservationType   = randomStrings[14];//\"type\";//randomStrings[13];//\"room\";\n    // const reservationTime = randomStrings[14];//\"time\";\n    \n    const ticketId          = randomStrings[15];//\"tid\";//randomStrings[15];//\"eid\";\n    const ticketPrice       = randomStrings[16];//\"price\";//randomStrings[16];//\"semester\";\n    const ticketBoardingDate = randomStrings[17];//\"boardingDate\";//randomStrings[17];//\"enrolled\";\n    const ticketType        = randomStrings2[10];//\"type\";//randomStrings2[14];//\"grade\";\n\n    const passengerId       = randomStrings2[0];//\"pid\";//randomStrings2[0];//\"sid\";\n    const passengerLast     = randomStrings2[1];//\"last\";//randomStrings2[1];//\"last\";\n    const passengerFirst    = randomStrings2[2];//\"first\";//randomStrings2[2];//\"first\";\n    const passengerAge      = randomStrings2[3];//\"age\";//randomStrings2[3];//\"address\";\n    const passengerEmail    = randomStrings2[4];//\"email\";//randomStrings2[4];//\"grade\";\n    const passengerContact  = randomStrings2[5];//\"contact\";//randomStrings2[4];//\"grade\";\n    \n    const NewYork           = randomArrayElement(destinations);//\"NewYork\";//randomStrings2[8];//\"NewYork\";\n    const FourHundred       = randomInt(1000);//randomStrings2[9];//\"FourHundred\";\n    \n    const passengerRename   = randomStrings2[6];//\"s\";\n    const reservationRename = randomStrings2[7];//\"s\";\n    const ticketRename      = randomStrings2[8];//\"e\";\n    const flightRename      = randomStrings2[9];//\"c\";\n    \n    return(\n        <div>\n            <h1>UML Group By Multiple Choice Sum</h1>\n            <div id=\"questionABC\">\n                Consider the following UML class diagram:\n                <br/>\n                <br/>\n\n                <ClassDiagramHorizontal\n                associations={[\n                    <AssociationHorizontal\n                        left={{cardinality: 1}}\n                        right={{cardinality: \"*\"}}/>,\n                    <AssociationHorizontal\n                        left={{cardinality: 1}}\n                        right={{cardinality: \"*\"}}/>,\n                    <AssociationHorizontal\n                        left={{cardinality: 1}}\n                        right={{cardinality: \"*\"}}/>,\n                    <AssociationHorizontal\n                        left={{cardinality: \"*\"}}\n                        right={{cardinality: 1}}/>,\n                ]}\n                classes={[\n                    <Clazz clazzName={airlineClass}\n                           fields={[\n                               {name: airlineId, pk: true},\n                               {name: airlineName}\n                           ]}/>,\n                    <Clazz clazzName={flightClass}\n                           fields={[\n                               {name: flightId, pk: true},\n                               {name: flightType},\n                               {name: flightSource},\n                               {name: flightDestination},\n                               {name: flightDuration},\n                               {name: airlineId, fk: true},\n                           ]}/>,\n                    <Clazz clazzName={reservationClass}\n                           fields={[\n                               {name: reservationId, pk: true},\n                               {name: reservationBookingAgent},\n                               {name: reservationType},\n                               {name: flightId, fk: true},\n                           ]}/>,\n                    <Clazz clazzName={ticketClass}\n                           fields={[\n                               {name: ticketId, pk: true},\n                               {name: reservationId, fk: true},\n                               {name: passengerId, fk: true},\n                               {name: ticketPrice},\n                               {name: ticketBoardingDate},\n                               {name: ticketType},\n                           ]}/>,\n                    <Clazz clazzName={passengerClass}\n                           fields={[\n                               {name: passengerId, pk: true},\n                               {name: passengerFirst},\n                               {name: passengerLast},\n                               {name: passengerAge},\n                               {name: passengerEmail},\n                               {name: passengerContact},\n                               {name: ticketId, fk: true},\n                           ]}/>,\n                ]}\n            />\n            <div style={{clear: \"both\"}}>\n                <br/>\n                Which of the SQL statements below best implements\n                the following query?\n                <br/>\n                <br/>\n\n                \"Which records in {reservationClass}s are related to\n                <br/>\n                &nbsp;records in {flightClass} whose field {flightDestination} is \"{NewYork}\"\n                <br/>\n                {/*&nbsp;and which have a total cost of ${FourHundred} or more,*/}\n                {/*<br/>*/}\n                {/*&nbsp;and the total cost of a {reservationClass} is*/}\n                {/*<br/>*/}\n                &nbsp;and the SUM of the {ticketPrice}s of all the {ticketClass}s\n                <br/>\n                &nbsp;related to {reservationClass} is more than ${FourHundred}\"\n                <br/>\n\n            </div>\n            </div>\n            <div id=\"answersABC\">\n                <hr/>\n                SELECT {reservationRename}.{reservationId}, SUM({ticketRename}.{ticketPrice})\n                <br/>\n                FROM {reservationClass} {reservationRename}, {flightClass} {flightRename}, {ticketClass} {ticketRename}\n                <br/>\n                WHERE {flightRename}.{flightId} = {reservationRename}.{flightId}\n                <br/>\n                AND {flightRename}.{flightDestination} = '{NewYork}'\n                <br/>\n                AND {reservationRename}.{reservationId} = {ticketRename}.{reservationId}\n                <br/>\n                GROUP BY {reservationRename}.{reservationId}\n                <br/>\n                HAVING SUM({ticketRename}.{ticketPrice}) > {FourHundred}\n\n                <hr/>\n                \n                SELECT {reservationRename}.{reservationId}, SUM({ticketRename}.{ticketPrice}) > {FourHundred}\n                <br/>\n                FROM {reservationClass} {reservationRename}, {flightClass} {flightRename}, {ticketClass} {ticketRename}\n                <br/>\n                WHERE {flightRename}.{flightId} = {reservationRename}.{flightId}\n                <br/>\n                AND {flightRename}.{flightDestination} = '{NewYork}'\n                <br/>\n                AND {reservationRename}.{reservationId} = {ticketRename}.{reservationId}\n                <br/>\n                GROUP BY {reservationRename}.{reservationId}\n                \n                <hr/>\n\n                SELECT {reservationRename}.{reservationId}, SUM({ticketRename}.{ticketPrice})\n                <br/>\n                FROM {reservationClass} {reservationRename}, {flightClass} {flightRename}, {ticketClass} {ticketRename}\n                <br/>\n                WHERE {flightRename}.{flightId} = {reservationRename}.{flightId}\n                <br/>\n                AND {flightRename}.destination = '{NewYork}'\n                <br/>\n                AND {reservationRename}.{reservationId} = {ticketRename}.{reservationId}\n                <br/>\n                HAVING SUM({ticketRename}.{ticketPrice}) >= {FourHundred}\n                \n                <hr/>\n\n                SELECT {reservationRename}.{reservationId}, SUM({ticketRename}.{ticketPrice})\n                <br/>\n                FROM {reservationClass} {reservationRename}, {flightClass} {flightRename}, {ticketClass} {ticketRename}\n                <br/>\n                WHERE {flightRename}.{flightId} = {reservationRename}.{flightId}\n                <br/>\n                AND {flightRename}.destination = '{NewYork}'\n                <br/>\n                AND {reservationRename}.{reservationId} = {ticketRename}.{reservationId}\n                \n                <hr/>\n\n            </div>\n        </div>\n    )\n}\nexport default UmlGroupByMultipleSum","/Users/jannunzi/webdev/quiz-maker/src/db-design/normalization/first-normal-form.js",[],"/Users/jannunzi/webdev/quiz-maker/src/db-design/normalization/second-normal-form.js",["331","332"],"import React from 'react'\nimport {randomSet, work} from \"../../utils/utils\";\nimport Pk from \"../utils/pk\";\nimport Fk from \"../utils/fk\";\n\nconst SecondNormalForm = () => {\n    const capitalizedStrings = randomSet(10, work, true)\n    const lowercaseStrings = randomSet(10, work)\n    \n    const courseTable = capitalizedStrings[0];//\"CUSTOMERS\";\n    const courseId = lowercaseStrings[0];//\"cid\";\n    const semester = lowercaseStrings[1];//\"first_name\";\n    const seats = lowercaseStrings[2];//\"last_name\";\n    const courseName = lowercaseStrings[3];//\"courseName\";    \n    \n    return(\n        <div>\n            <h1>Second Normal Form</h1>\n            <div id=\"question123\">\n                Consider the following schema with\n                composite primary key {'{'}{courseId}, {semester}{'}'}\n                <br/>\n                and a dependency between fields {courseName} and {courseId}\n                <br/>\n                <br/>\n                {courseTable}({'{'}{courseId}, {semester}{'}'}, {seats}, {courseName})\n                <br/>\n                <br/>\n                Which normalization is the schema violating?\n            </div>\n            <div id=\"answers234\">\n                <hr/>\n                Second normal form\n                <hr/>\n                First normal form\n                <hr/>\n                Third normal form\n                <hr/>\n                The schema does not violate any normal form\n            </div>\n        </div>\n    )\n}\n\nexport default SecondNormalForm","/Users/jannunzi/webdev/quiz-maker/src/db-design/normalization/third-normal-form.js",["333","334"],"import React from 'react'\nimport {randomSet, work} from \"../../utils/utils\";\nimport Pk from \"../utils/pk\";\nimport Fk from \"../utils/fk\";\n\nconst ThirdNormalForm = () => {\n    const capitalizedStrings = randomSet(10, work, true)\n    const lowercaseStrings = randomSet(10, work)\n    \n    const courseTable = capitalizedStrings[0];//\"CUSTOMERS\";\n    const courseId = lowercaseStrings[0];//\"cid\";\n    const semester = lowercaseStrings[1];//\"first_name\";\n    const seats = lowercaseStrings[2];//\"last_name\";\n    const courseName = lowercaseStrings[3];//\"courseName\";    \n    \n    return(\n        <div>\n            <h1>Third Normal Form</h1>\n            <div id=\"question123\">\n                Consider the following schema with\n                composite primary key {'{'}{courseId}, {semester}{'}'}\n                <br/>\n                and a dependency between fields {courseName} and {seats}\n                <br/>\n                <br/>\n                {courseTable}({'{'}{courseId}, {semester}{'}'}, {seats}, {courseName})\n                <br/>\n                <br/>\n                Which normalization is the schema violating?\n            </div>\n            <div id=\"answers234\">\n                <hr/>\n                Third normal form\n                <hr/>\n                Second normal form\n                <hr/>\n                First normal form\n                <hr/>\n                The schema does not violate any normal form\n            </div>\n        </div>\n    )\n}\n\nexport default ThirdNormalForm","/Users/jannunzi/webdev/quiz-maker/src/db-design/uml/text-to-uml.js",["335"],"import React from 'react'\nimport DiamondShape from \"../utils/diamond-shape\";\nimport AssociationHorizontal from \"../utils/association-horizontal\";\nimport Clazz from \"../utils/clazz\";\nimport ClassDiagramHorizontal from \"../utils/class-diagram-horizontal\";\nimport {education, randomSet, work} from \"../../utils/utils\";\nimport Fk from \"../utils/fk\";\nimport Pk from \"../utils/pk\";\n\nconst TextToUml = () => {\n\n    const uppercase = randomSet(10, work, true)\n    const lowercase = randomSet(10, education)\n    \n    const songs = uppercase[0];//\"SONGS\";\n    const playlists = uppercase[1];//\"PLAYLISTS\";\n\n    const id = lowercase[0];//\"id\";\n    const id2 = lowercase[1];//\"id\";\n    const name = lowercase[2];//\"name\";\n    const name2 = lowercase[3];//\"name\";\n\n    const fields = [\n        {name: id, pk:true},\n        {name: name},\n    ]\n    const fields2 = [\n        {name: id2, pk:true},\n        {name: name2},\n        {name: id, fk:true},\n    ]\n\n    return(\n        <div>\n            <h1>Text to UML</h1>\n            <div id=\"question321\">\n\n                Consider the following schema\n                <br/>\n                <br/>\n                {playlists}(<Pk name={id}/>, {name})\n                <br/>\n                {songs}(<Pk name={id2}/>, {name2}, <Fk name={id}/>)\n                <br/>\n                <br/>\n\n                further consider the following constraint\n                <br/>\n                <br/>\n                \"{songs} can not exist without a corresponding {playlists}\"\n                <br/>\n                <br/>\n                Select the best equivalent UML diagram from the choices listed below\n                <br/>\n                <br/>\n            </div>\n            <div id=\"1\">\n                <ClassDiagramHorizontal\n                    classes={[\n                        <Clazz clazzName={playlists} fields={fields}/>,\n                        <Clazz clazzName={songs} fields={fields2}/>,\n                    ]}\n                    associations={[\n                        <AssociationHorizontal\n                            left={{cardinality: 1, decoration: \"COMPOSITION\"}}\n                            right={{cardinality: \"*\"}}/>\n                    ]}\n                />\n            </div>\n            \n                <hr style={{clear: \"both\"}}/>\n            <div id=\"2\">\n                <ClassDiagramHorizontal\n                    classes={[\n                        <Clazz clazzName={playlists} fields={fields}/>,\n                        <Clazz clazzName={songs} fields={fields2}/>,\n                    ]}\n                    associations={[\n                        <AssociationHorizontal\n                            left={{cardinality: 1, decoration: \"AGGREGATION\"}}\n                            right={{cardinality: \"*\"}}/>\n                    ]}\n                />\n            </div>\n                <hr style={{clear: \"both\"}}/>\n            <div id=\"3\">\n                <ClassDiagramHorizontal\n                    classes={[\n                        <Clazz clazzName={playlists} fields={fields}/>,\n                        <Clazz clazzName={songs} fields={fields2}/>,\n                    ]}\n                    associations={[\n                        <AssociationHorizontal\n                            left={{cardinality: 1, decoration: \"INHERITANCE\"}}\n                            right={{cardinality: \"*\"}}/>\n                    ]}\n                />\n            </div>\n                <hr style={{clear: \"both\"}}/>\n            <div id=\"4\">\n                <ClassDiagramHorizontal\n                    classes={[\n                        <Clazz clazzName={playlists} fields={fields}/>,\n                        <Clazz clazzName={songs} fields={fields2}/>,\n                    ]}\n                    associations={[\n                        <AssociationHorizontal\n                            left={{cardinality: \"*\"}}\n                            right={{cardinality: \"1\", decoration: \"AGGREGATION\"}}/>\n                    ]}\n                />\n            </div>\n                <hr style={{clear: \"both\"}}/>\n            <div id=\"5\">\n                <ClassDiagramHorizontal\n                    classes={[\n                        <Clazz clazzName={playlists} fields={fields}/>,\n                        <Clazz clazzName={songs} fields={fields2}/>,\n                    ]}\n                    associations={[\n                        <AssociationHorizontal\n                            right={{cardinality: 1, decoration: \"COMPOSITION\"}}\n                            left={{cardinality: \"*\"}}/>\n                    ]}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default TextToUml","/Users/jannunzi/webdev/quiz-maker/src/db-design/utils/diamond-shape.js",[],"/Users/jannunzi/webdev/quiz-maker/src/db-design/relational-algebra/symbol.js",["336"],"import React from 'react'\nimport {randomSet, work, education, randomInt} from \"../../utils/utils\";\n\nconst RelationalAlgebraSymbol = () => {\n    \n    const randomStrings = randomSet(10, work, true)\n    const randomStrings2 = randomSet(10, education, false)\n\n    const student = randomStrings[0]\n    const department = randomStrings[1]\n    \n    const sid = randomStrings2[0]\n    const name = randomStrings2[1]\n    const grad_year = randomStrings2[2]\n    const did = randomStrings2[3]\n    const dname = randomStrings2[3]\n    \n    const year = randomInt(50) + 2020\n    const did10 = randomInt(10) + 10\n    \n    return(\n        <div>\n            <h2>Relational Algebra Symbol</h2>\n            \n            <div id=\"question333\">\n                \n                Consider the following schema:\n                <br/>\n                <br/>\n                {student}({sid}, {name}, {grad_year}, {did})\n                <br/>\n                {department}({did}, {name})\n                <br/>\n                <br/>\n                What does the following expression mean?\n                <br/>\n                <br/>\n                <table style={{fontSize: \"1.5em\"}}>\n                    <tr>\n                        <td>π</td>\n                        <td><sub>{name}</sub></td>\n                        <td>(σ</td>\n                        <td><sub>{did}={did10}^{grad_year}={year}</sub></td>\n                        <td>({student}))</td>\n                    </tr>\n                </table>\n            </div>\n            \n            <div id=\"answers333\">\n                <br/>\n                <br/>\n\n                Retrieve {student}'s {name}s of {student}s related to {did}={did10} and {grad_year} is {year}\n                <br/>\n                <br/>\n\n                Retrieve {student}'s {name}s of {student}s related to {did}={did10} or {grad_year} is {year}\n                <br/>\n                <br/>\n\n                Retrieve {department}'s {name}s for {student}s related to {did}={did10} and {grad_year} is {year}\n                <br/>\n                <br/>\n\n                Retrieve {department}'s {name}s for {student}s related to {did}={did10} or {grad_year} is {year}\n                \n                \n            </div>\n        </div>\n    )\n}\n\nexport default RelationalAlgebraSymbol","/Users/jannunzi/webdev/quiz-maker/src/db-design/relational-algebra/text.js",["337","338"],"import React from 'react'\nimport {randomSet, work, education, randomInt} from \"../../utils/utils\";\n\nconst RelationalAlgebraText = () => {\n    \n    const randomStrings = randomSet(10, work, true)\n    const randomStrings2 = randomSet(10, education, false)\n\n    const student = randomStrings[0]\n    const department = randomStrings[1]\n    \n    const sid = randomStrings2[0]\n    const name = randomStrings2[1]\n    const grad_year = randomStrings2[2]\n    const did = randomStrings2[3]\n    const dname = randomStrings2[3]\n    \n    const year = randomInt(50) + 2020\n    const did10 = randomInt(10) + 10\n    \n    return(\n        <div>\n            <h2>Relational Algebra Text</h2>\n            \n            <div id=\"question333\">\n                \n                Consider the following schema:\n                <br/>\n                <br/>\n                {student}({sid}, {name}, {grad_year}, {did})\n                <br/>\n                {department}({did}, {name})\n                <br/>\n                <br/>\n                What does the following expression mean?\n                <br/>\n                <br/>\n                SELECT(PROJECT({student}, {name}), {did}={did10})\n            </div>\n            \n            <div id=\"answers333\">\n                <br/>\n                <br/>\n\n                The query is meaningless, therefore the query returns nothing\n                <br/>\n                <br/>\n\n                The {name}s of {student}s related to {department} whose {did}={did10}\n                <br/>\n                <br/>\n\n                The {name}s of {student}s concatenated with the {name}s of {department} whose {did}={did10}\n                <br/>\n                <br/>\n\n                The inner PROJECT is meaningless, therefore the query just returns the {department} whose {did}={did10}\n                <br/>\n                <br/>\n\n            </div>\n        </div>\n    )\n}\n\nexport default RelationalAlgebraText","/Users/jannunzi/webdev/quiz-maker/src/web-dev/widget-list/widget-list.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/html/radio.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/state/function/use-state/t.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/state/class/state1.js",["339","340","341","342","343","344"],"import React from 'react'\nimport {randomArray, randomString, randomSet, fruits, randomInt, work} from \"../../../../utils/utils\";\n\nconst State1 = () => {\n    // const a = randomString(3);\n    // const a = randomString(3);\n    // const a = randomString(3);\n    // const a = randomString(3);\n    // const a = randomString(3);\n    const randomString = randomSet(10, fruits, false);\n    const a = randomString[0]\n    const b = randomString[1]\n    const c = randomString[2]\n    const d = randomString[3]\n    const e = randomString[4]\n    const f = randomInt(10);\n    const g = randomInt(10);\n    \n    const randomCapitalized = randomSet(10, work, true)\n    const D = randomCapitalized[0];\n    const E = randomCapitalized[1];\n    const Toggle = randomCapitalized[2];\n    \n    return(\n        <div>\n            <h1>Class State</h1>\n            Consider the following code snippet\n            <br/>\n            <ToggleStr Toggle={Toggle} a={a} b={b} c={c} D={D} E={E} f={f} g={g}/>\n            What is displayed in {`<h1>`} when the component first renders: {'[ZERO]'}\n            <br/>\n            What is displayed in {`<h1>`} when you click on {D}: {'[ONE]'}\n            <br/>\n            What is displayed in {`<h1>`} when you click on {E}: {'[ZERO1]'}\n            <Toggle/>\n        </div>\n    )\n}\n\nexport default State1\n\nconst ToggleStr = ({Toggle, a, b, c, D, E, f, g}) => {\n    return(\n        <pre>\n{`\nclass ${Toggle} extends React.Component {\n  state = {\n    ${a}: 0\n  }\n  render() {\n    return(\n      <div>\n        <h1>{this.state.${a}}</h1>\n        {this.state.${a} % ${f} === 0 &&\n          <button onClick={() => this.setState((${b}) => ({${a}: ++${b}.${a}}))}>\n            ${D}\n          </button>}\n        {this.state.${a} % ${g} !== 0 &&\n          <button onClick={() => this.setState((${c}) => ({${a}: --${c}.${a}}))}>\n            ${E}\n          </button>}\n      </div>\n    )\n  }\n}`}</pre>\n    )\n}\n\nclass Toggle extends React.Component {\n    state = {\n        a: 0\n    }\n    render() {\n        return(\n            <div>\n                <h1>{this.state.a}</h1>\n                {this.state.a % 4 === 0 && <button onClick={() => this.setState((b) => ({a: ++b.a}))}>D</button>}\n                {this.state.a % 5 !== 0 && <button onClick={() => this.setState((c) => ({a: --c.a}))}>E</button>}\n            </div>\n        )\n    }\n}\n\nconst Correct = () =>\n    <div>\n        Consider the following coded snippet:\n        {'export default class A extends {'}\n    </div>","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/state/redux/state-redux.js",["345"],"import React from 'react'\nimport {Provider, connect} from \"react-redux\";\nimport {createStore} from \"redux\";\nimport Counter from \"./counter\"\nimport {randomArrayOfStrings, randomInt} from \"../../../../utils/utils\"\n\nconst initialCount = randomInt(10)\nconst increment = randomInt(10)\nconst decrement = randomInt(10)\n\nconst StateRedux = () => {\n    const strings = randomArrayOfStrings()\n    const stringsCapitalized = randomArrayOfStrings(2, 20, true)\n    const incrementButton = stringsCapitalized[0]\n    const decrementButton = stringsCapitalized[1]\n    const counterContainerStr = stringsCapitalized[2]\n    return(\n        <div>\n            <h2>State Redux Plus 2 Minus 3 </h2>\n            Consider the following code snippet:\n            <CounterContainerStr\n                reducer={strings[0]}\n                stateInReducer={strings[2]}\n                count={strings[1]}\n                stateProperty={strings[3]}\n                PLUS_TWO={strings[5]}\n                MINUS_THREE={strings[4]}\n                plus2={strings[5]}\n                minus3={strings[6]}\n                initialCount={initialCount}\n                increment={increment}\n                decrement={decrement}\n                incrementButton={incrementButton}\n                decrementButton={decrementButton}\n                CounterContainer={counterContainerStr}\n                Counter={stringsCapitalized[3]}\n                stpmState={strings[7]}\n                dtpmDispatch={strings[8]}\n                action={strings[9]}\n            />\n            <br/>\n            What does {`<h1>`} display when the component {counterContainerStr} first renders: {`[INITIALCOUNT_${initialCount}]`}\n            <br/>\n            What does {`<h1>`} display after pressing button {incrementButton}: {`[AFTERINCREMENT_${initialCount + increment}]`}\n            <br/>\n            What does {`<h1>`} display after pressing button {decrementButton}: {`[AFTERDECREMENT_${initialCount + increment - decrement}]`}\n            <br/>\n\n            <CounterContainer/>\n        </div>\n    )\n}\n\nconst CounterContainerStr = (\n    {\n        reducer=\"reducer\",\n        stateInReducer=\"state\",\n        count=\"count\",\n        stateProperty=\"count\",\n        PLUS_TWO=\"PLUS_TWO\",\n        MINUS_THREE=\"MINUS_THREE\",\n        plus2=\"plus2\",\n        minus3=\"minus3\",\n        initialCount=0,\n        increment=2,\n        decrement=3,\n        incrementButton,\n        decrementButton,\n        Counter=\"Counter\",\n        CounterContainer=\"CounterContainer\",\n        stpmState=\"state\",\n        dtpmDispatch=\"dispatch\",\n        action=\"action\"\n    }) =>\n    <div>\n\n        <pre>\n{`\nconst ${reducer} = (${stateInReducer} = {${count}: ${initialCount}, ${action}) => {\n    switch(${action}.type) {\n        case \"${PLUS_TWO}\":\n            return {\n                ${count}: ${stateInReducer}.${count} + ${increment}\n            }\n        case \"${MINUS_THREE}\":\n            return {\n                ${count}: ${stateInReducer}.${count} - ${decrement}\n            }\n        default:\n            return ${stateInReducer}\n    }\n}`}\n        </pre>\n        <pre>\n{`const store = createStore(${reducer})\n\nconst ${CounterContainer} = () =>\n    <Provider store={store}>\n        <${Counter}/>\n    </Provider>\n`}\n        </pre>\n        <pre>\n{`\nconst ${Counter} = ({${plus2}, ${minus3}, ${stateProperty}}) =>\n    <div>\n        <h1>{${stateProperty}}</h1>\n        <button onClick={${plus2}}>${incrementButton}</button>\n        <button onClick={${minus3}}>${decrementButton}</button>\n    </div>\n\nconst stpm = (${stpmState}) => ({${stateProperty}: ${stpmState}.${count}})\nconst dtpm = (${dtpmDispatch}) => ({\n    ${plus2}: () => ${dtpmDispatch}({type: \"${PLUS_TWO}\"}),\n    ${minus3}: () => ${dtpmDispatch}({type: \"${MINUS_THREE}\"}),\n})\nexport default connect(stpm, dtpm)(${Counter})\n`}\n        </pre>\n    </div>\n\nconst reducer = (state = {count: initialCount}, action) => {\n    switch(action.type) {\n        case \"PLUS_TWO\":\n            return {\n                count: state.count + increment\n            }\n        case \"MINUS_THREE\":\n            return {\n                count: state.count - decrement\n            }\n        default:\n            return state\n    }\n}\n\nconst store = createStore(reducer)\n\nconst CounterContainer = () =>\n    <Provider store={store}>\n        <Counter/>\n    </Provider>\n\nexport default StateRedux","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/state/redux/counter.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/es6/spreader/spreader-array.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/es6/spreader/spreader-object.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/state/class/state-class-prev-state.js",["346","347","348"],"import React from 'react'\nimport {randomArrayOfStrings, randomInt} from \"../../../../utils/utils\";\n\nconst StateClassPrevState = () => {\n    const strings = randomArrayOfStrings()\n    const caps = randomArrayOfStrings(2, 20, true)\n    const ten = randomInt(50, 10)\n    return (\n        <div>\n            <h2>State Class Prev State</h2>\n            <Question Answer={caps[0]} count={strings[1]} ten={ten}\n                      ewq={strings[2]} rew={strings[3]} tre={strings[4]} \n                      prevState={strings[5]}\n                      A={caps[6]} B={caps[7]} C={caps[8]}/>\n            <Answer ten={ten}/>\n        </div>)\n}\n\nexport default StateClassPrevState\n\nconst Question = (\n    {\n        Answer=\"Answer\", count=\"count\", ten=10, ewq=\"ewq\", rew=\"rew\", tre=\"tre\",\n        prevState=\"prevState\", A=\"A\", B=\"B\", C=\"C\"\n    }) => {\n    const code = `\nclass ${Answer} extends React.Component {\n    state = {\n        ${count}: ${ten}\n    }\n    ${ewq} = () => this.state.${count} = this.state.${count}++\n    ${rew} = () => this.setState({\n        ${count}: ++this.state.${count}\n    })\n    ${tre} = () => this.setState(${prevState} => ({\n        ${count}: ++${prevState}.${count}\n    }))\n    render() {\n        return(\n            <div>\n                <h1>{this.state.${count}}</h1>\n                <button onClick={this.${ewq}}>${A}</button>\n                <button onClick={this.${rew}}>${B}</button>\n                <button onClick={this.${tre}}>${C}</button>\n            </div>\n        )\n    }\n}`\n    return (<div>\n        Consider the following code snippet:\n        <pre>\n            {code}\n        </pre>\n\n        What does {`<h1>`} render when component {Answer} first mounts? [ANSWER_{ten}]\n        <br/>\n        What does {`<h1>`} render when we click button {B}? [ANSWER_{ten + 1}]\n        <br/>\n        What does {`<h1>`} render when we click button {C}? [ANSWER_{ten + 2}]\n        <br/>\n        Which is a better implementation, function <code>{rew}</code> or function <code>{tre}</code>? [ANSWER_{tre}]\n        <br/>\n    </div>)\n    }    \n\nclass Answer extends React.Component {\n    state = {\n        count: this.props.ten\n    }\n    ewq = () => this.state.count = this.state.count++\n    rew = () => this.setState({\n        count: ++this.state.count\n    })\n    tre = () => this.setState(prevState => ({\n        count: ++prevState.count\n    }))\n    render() {\n        return(\n            <div>\n                <h1>{this.state.count}</h1>\n                <button onClick={this.ewq}>A</button>\n                <button onClick={this.rew}>B</button>\n                <button onClick={this.tre}>C</button>\n            </div>\n        )\n    }\n}","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/class/props.js",["349"],"import React from 'react'\nimport {randomArrayOfStrings} from \"../../../utils/utils\";\n\nconst ReactClassProps = () => {\n    const strings = randomArrayOfStrings()\n    const caps = randomArrayOfStrings(2, 20, true)\n    return(\n        <div>\n            <h1>React Class Props Syntax</h1>\n            <Question\n                A={caps[0]} B={caps[1]} C={caps[2]} D={caps[3]}\n                messageAtr={strings[0]} HelloWorld={caps[4]}/>\n        </div>\n    )\n}\n\nexport default ReactClassProps\n\nconst Question = (\n    {\n        A=\"A\", B=\"B\", C=\"C\", D=\"D\",\n        messageAtr = \"message\", HelloWorld = \"Hello World\"\n    }) => {\n    return(\n        <div>\n            Consider the following code snippet:\n            <pre>\n                {`\nconst Answer = () =>\n    <div>\n        <${A} ${messageAtr}=\"${HelloWorld}\"/>\n        <${B} ${messageAtr}=\"${HelloWorld}\"/>\n        <${C} ${messageAtr}=\"${HelloWorld}\"/>\n        <${D} ${messageAtr}=\"${HelloWorld}\"/>\n    </div>\n`}</pre>\n\n            Which of the following implementations for <code>{A}</code>, <code>{B}</code>, <code>{C}</code>, and <code>{D}</code> displays \"{HelloWorld}\"?\n            Select all that apply\n<hr/>\n\n            <input type=\"checkbox\" checked={true}/>\n<pre>{`\nclass ${A}\n    extends React.Component {\n    render() {\n        return(\n            <h1>{this.props.${messageAtr}}</h1>\n        )\n    }\n}`}\n</pre>\n<input type=\"checkbox\" checked={true}/>\n<pre>{`\nconst ${B} = ({${messageAtr}}) =>\n    <h1>{${messageAtr}}</h1>\n`}</pre>\n<input type=\"checkbox\"/>\n<pre>{`\nconst ${C} = ({${messageAtr}}) =>\n    <h1>{this.props.${messageAtr}}</h1>\n`}</pre>\n<input type=\"checkbox\"/>\n<pre>{`\nclass ${D}\n    extends React.Component {\n    render({${messageAtr}}) {\n        return(\n            <h1>{${messageAtr}}</h1>\n        )\n    }\n}`}\n            </pre>\n        </div>\n    )\n}\n\nconst Answer = () =>\n    <div>\n        <A message=\"Hello World\"/>\n        <B message=\"Hello World\"/>\n        <C message=\"Hello World\"/>\n        <D message=\"Hello World\"/>\n    </div>\n\nclass A\n    extends React.Component {\n    render() {\n        return(\n            <h1>{this.props.message}</h1>\n        )\n    }\n}\n\nconst B = ({message}) =>\n    <h1>{message}</h1>\n\nconst C = ({message}) =>\n    <h1>{this.props.message}</h1>\n\nclass D\n    extends React.Component {\n    render({message}) {\n        return(\n            <h1>{message}</h1>\n        )\n    }\n}\n","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/function/return/return.js",["350","351","352"],"import React from 'react'\nimport {randomArrayOfStrings} from \"../../../../utils/utils\";\nimport {Link} from \"react-router-dom\";\n\nconst ReactFunctionReturn = () => {\n    const strings = randomArrayOfStrings()\n    const caps = randomArrayOfStrings(2, 20, true)\n    return(\n        <div>\n            <h1>React Function Return</h1>\n            <Question f={caps[2]} HelloWorld={caps[4]}/>\n        </div>\n    )\n}\n\nexport default ReactFunctionReturn\n\nconst Question = (\n    {\n        f=\"f\",\n        HelloWorld = \"Hello World\"\n    }) => {\n    return(\n        <div>\n            Which of the following implementations displays {`<h1>`}{HelloWorld}{`</h1>`}?\n            Select all that apply\n<hr/>\n\n            <input type=\"checkbox\" checked={true}/>\n<pre>{`\nconst ${f} = () =>\n    <h1>${HelloWorld}</h1>\n`}\n</pre>\n<input type=\"checkbox\" checked={true}/>\n<pre>{`\nfunction ${f}() {\n    return(<h1>${HelloWorld}</h1>)\n}\n`}</pre>\n            <input type=\"checkbox\" checked={true}/>\n<pre>{`\nconst ${f} = () => {\n    return(<h1>${HelloWorld}</h1>)\n}\n`}</pre>\n            <input type=\"checkbox\" checked={true}/>\n<pre>{`\nclass ${f} extends React.Component {\n    render() {\n        return(\n            <h1>${HelloWorld}</h1>\n        )\n    }\n}`}\n            </pre>\n        </div>\n    )\n}\n\nconst Answer = () =>\n    <div>\n        <A message=\"Hello World\"/>\n        <B message=\"Hello World\"/>\n        <C message=\"Hello World\"/>\n        <D message=\"Hello World\"/>\n    </div>\n\nclass A\n    extends React.Component {\n    render() {\n        return(\n            <h1>{this.props.message}</h1>\n        )\n    }\n}\n\nconst B = ({message}) =>\n    <h1>{message}</h1>\n\nconst C = ({message}) =>\n    <h1>{this.props.message}</h1>\n\nclass D\n    extends React.Component {\n    render({message}) {\n        return(\n            <h1>{message}</h1>\n        )\n    }\n}\n","/Users/jannunzi/webdev/quiz-maker/src/web-dev/es6/map/map1.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/es6/filter/filter.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/html/labels.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/html/labels-and-radios.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/html/placeholder.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/html/title.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/html/value.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/html/textarea.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/css/color-and-bg-color.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/routing/routing-navigation.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/routing/add.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/routing/subtract.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/routing/nav1.js",[],"/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongo/mongo-find-all.js",["353"],{"ruleId":"354","severity":1,"message":"355","line":7,"column":8,"nodeType":"356","messageId":"357","endLine":7,"endColumn":25},{"ruleId":"354","severity":1,"message":"358","line":8,"column":8,"nodeType":"356","messageId":"357","endLine":8,"endColumn":20},{"ruleId":"359","replacedBy":"360"},{"ruleId":"361","replacedBy":"362"},{"ruleId":"354","severity":1,"message":"363","line":1,"column":8,"nodeType":"356","messageId":"357","endLine":1,"endColumn":12},{"ruleId":"354","severity":1,"message":"364","line":3,"column":37,"nodeType":"356","messageId":"357","endLine":3,"endColumn":46},{"ruleId":"354","severity":1,"message":"365","line":11,"column":9,"nodeType":"356","messageId":"357","endLine":11,"endColumn":22},{"ruleId":"354","severity":1,"message":"366","line":12,"column":9,"nodeType":"356","messageId":"357","endLine":12,"endColumn":22},{"ruleId":"354","severity":1,"message":"367","line":13,"column":9,"nodeType":"356","messageId":"357","endLine":13,"endColumn":22},{"ruleId":"354","severity":1,"message":"368","line":14,"column":9,"nodeType":"356","messageId":"357","endLine":14,"endColumn":22},{"ruleId":"354","severity":1,"message":"369","line":5,"column":57,"nodeType":"356","messageId":"357","endLine":5,"endColumn":61},{"ruleId":"354","severity":1,"message":"367","line":13,"column":9,"nodeType":"356","messageId":"357","endLine":13,"endColumn":22},{"ruleId":"354","severity":1,"message":"368","line":14,"column":9,"nodeType":"356","messageId":"357","endLine":14,"endColumn":22},{"ruleId":"354","severity":1,"message":"370","line":91,"column":9,"nodeType":"356","messageId":"357","endLine":91,"endColumn":18},{"ruleId":"371","severity":1,"message":"372","line":5,"column":1,"nodeType":"373","endLine":60,"endColumn":2},{"ruleId":"371","severity":1,"message":"372","line":5,"column":1,"nodeType":"373","endLine":65,"endColumn":2},{"ruleId":"371","severity":1,"message":"372","line":5,"column":1,"nodeType":"373","endLine":153,"endColumn":2},{"ruleId":"374","severity":1,"message":"375","line":4,"column":5,"nodeType":"376","messageId":"377","endLine":6,"endColumn":6},{"ruleId":"374","severity":1,"message":"375","line":4,"column":5,"nodeType":"376","messageId":"377","endLine":6,"endColumn":6},{"ruleId":"374","severity":1,"message":"375","line":5,"column":5,"nodeType":"376","messageId":"377","endLine":7,"endColumn":6},{"ruleId":"354","severity":1,"message":"378","line":2,"column":22,"nodeType":"356","messageId":"357","endLine":2,"endColumn":32},{"ruleId":"354","severity":1,"message":"379","line":2,"column":34,"nodeType":"356","messageId":"357","endLine":2,"endColumn":48},{"ruleId":"354","severity":1,"message":"380","line":2,"column":61,"nodeType":"356","messageId":"357","endLine":2,"endColumn":84},{"ruleId":"354","severity":1,"message":"381","line":2,"column":86,"nodeType":"356","messageId":"357","endLine":2,"endColumn":92},{"ruleId":"354","severity":1,"message":"378","line":2,"column":22,"nodeType":"356","messageId":"357","endLine":2,"endColumn":32},{"ruleId":"354","severity":1,"message":"379","line":2,"column":34,"nodeType":"356","messageId":"357","endLine":2,"endColumn":48},{"ruleId":"354","severity":1,"message":"380","line":2,"column":61,"nodeType":"356","messageId":"357","endLine":2,"endColumn":84},{"ruleId":"354","severity":1,"message":"381","line":2,"column":86,"nodeType":"356","messageId":"357","endLine":2,"endColumn":92},{"ruleId":"354","severity":1,"message":"378","line":2,"column":22,"nodeType":"356","messageId":"357","endLine":2,"endColumn":32},{"ruleId":"354","severity":1,"message":"379","line":2,"column":34,"nodeType":"356","messageId":"357","endLine":2,"endColumn":48},{"ruleId":"354","severity":1,"message":"380","line":2,"column":61,"nodeType":"356","messageId":"357","endLine":2,"endColumn":84},{"ruleId":"354","severity":1,"message":"381","line":2,"column":86,"nodeType":"356","messageId":"357","endLine":2,"endColumn":92},{"ruleId":"354","severity":1,"message":"382","line":3,"column":5,"nodeType":"356","messageId":"357","endLine":3,"endColumn":16},{"ruleId":"354","severity":1,"message":"378","line":4,"column":5,"nodeType":"356","messageId":"357","endLine":4,"endColumn":15},{"ruleId":"354","severity":1,"message":"379","line":5,"column":5,"nodeType":"356","messageId":"357","endLine":5,"endColumn":19},{"ruleId":"354","severity":1,"message":"380","line":7,"column":5,"nodeType":"356","messageId":"357","endLine":7,"endColumn":28},{"ruleId":"354","severity":1,"message":"381","line":8,"column":5,"nodeType":"356","messageId":"357","endLine":8,"endColumn":11},{"ruleId":"354","severity":1,"message":"383","line":11,"column":9,"nodeType":"356","messageId":"357","endLine":11,"endColumn":13},{"ruleId":"354","severity":1,"message":"384","line":15,"column":11,"nodeType":"356","messageId":"357","endLine":15,"endColumn":19},{"ruleId":"354","severity":1,"message":"385","line":40,"column":11,"nodeType":"356","messageId":"357","endLine":40,"endColumn":16},{"ruleId":"354","severity":1,"message":"386","line":41,"column":11,"nodeType":"356","messageId":"357","endLine":41,"endColumn":18},{"ruleId":"354","severity":1,"message":"387","line":42,"column":11,"nodeType":"356","messageId":"357","endLine":42,"endColumn":19},{"ruleId":"354","severity":1,"message":"388","line":46,"column":11,"nodeType":"356","messageId":"357","endLine":46,"endColumn":26},{"ruleId":"354","severity":1,"message":"389","line":3,"column":8,"nodeType":"356","messageId":"357","endLine":3,"endColumn":10},{"ruleId":"354","severity":1,"message":"390","line":4,"column":8,"nodeType":"356","messageId":"357","endLine":4,"endColumn":10},{"ruleId":"354","severity":1,"message":"389","line":3,"column":8,"nodeType":"356","messageId":"357","endLine":3,"endColumn":10},{"ruleId":"354","severity":1,"message":"390","line":4,"column":8,"nodeType":"356","messageId":"357","endLine":4,"endColumn":10},{"ruleId":"354","severity":1,"message":"391","line":2,"column":8,"nodeType":"356","messageId":"357","endLine":2,"endColumn":20},{"ruleId":"354","severity":1,"message":"392","line":16,"column":11,"nodeType":"356","messageId":"357","endLine":16,"endColumn":16},{"ruleId":"354","severity":1,"message":"392","line":16,"column":11,"nodeType":"356","messageId":"357","endLine":16,"endColumn":16},{"ruleId":"354","severity":1,"message":"393","line":18,"column":11,"nodeType":"356","messageId":"357","endLine":18,"endColumn":15},{"ruleId":"354","severity":1,"message":"382","line":2,"column":9,"nodeType":"356","messageId":"357","endLine":2,"endColumn":20},{"ruleId":"354","severity":1,"message":"394","line":2,"column":22,"nodeType":"356","messageId":"357","endLine":2,"endColumn":34},{"ruleId":"354","severity":1,"message":"395","line":14,"column":11,"nodeType":"356","messageId":"357","endLine":14,"endColumn":12},{"ruleId":"354","severity":1,"message":"396","line":15,"column":11,"nodeType":"356","messageId":"357","endLine":15,"endColumn":12},{"ruleId":"354","severity":1,"message":"397","line":69,"column":7,"nodeType":"356","messageId":"357","endLine":69,"endColumn":13},{"ruleId":"354","severity":1,"message":"398","line":84,"column":7,"nodeType":"356","messageId":"357","endLine":84,"endColumn":14},{"ruleId":"354","severity":1,"message":"399","line":2,"column":19,"nodeType":"356","messageId":"357","endLine":2,"endColumn":26},{"ruleId":"400","severity":1,"message":"401","line":70,"column":17,"nodeType":"402","endLine":70,"endColumn":27},{"ruleId":"400","severity":1,"message":"401","line":70,"column":36,"nodeType":"402","endLine":70,"endColumn":46},{"ruleId":"400","severity":1,"message":"401","line":72,"column":18,"nodeType":"402","endLine":72,"endColumn":28},{"ruleId":"354","severity":1,"message":"403","line":78,"column":7,"nodeType":"356","messageId":"357","endLine":78,"endColumn":13},{"ruleId":"354","severity":1,"message":"383","line":3,"column":9,"nodeType":"356","messageId":"357","endLine":3,"endColumn":13},{"ruleId":"354","severity":1,"message":"404","line":6,"column":11,"nodeType":"356","messageId":"357","endLine":6,"endColumn":18},{"ruleId":"354","severity":1,"message":"403","line":61,"column":7,"nodeType":"356","messageId":"357","endLine":61,"endColumn":13},{"ruleId":"354","severity":1,"message":"405","line":2,"column":9,"nodeType":"356","messageId":"357","endLine":2,"endColumn":27},"no-unused-vars","'CounterReactState' is defined but never used.","Identifier","unusedVar","'CounterRedux' is defined but never used.","no-native-reassign",["406"],"no-negated-in-lhs",["407"],"'logo' is defined but never used.","'useParams' is defined but never used.","'randomRenameA' is assigned a value but never used.","'randomRenameB' is assigned a value but never used.","'randomRenamea' is assigned a value but never used.","'randomRenameb' is assigned a value but never used.","'join' is defined but never used.","'rowColors' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'randomData' is defined but never used.","'randomFruitSet' is defined but never used.","'randomStringCapitalized' is defined but never used.","'fruits' is defined but never used.","'randomArray' is defined but never used.","'Link' is defined but never used.","'zipClass' is assigned a value but never used.","'zipId' is assigned a value but never used.","'zipCity' is assigned a value but never used.","'zipState' is assigned a value but never used.","'passengerRename' is assigned a value but never used.","'Pk' is defined but never used.","'Fk' is defined but never used.","'DiamondShape' is defined but never used.","'dname' is assigned a value but never used.","'year' is assigned a value but never used.","'randomString' is defined but never used.","'d' is assigned a value but never used.","'e' is assigned a value but never used.","'Toggle' is defined but never used.","'Correct' is assigned a value but never used.","'connect' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'Answer' is assigned a value but never used.","'strings' is assigned a value but never used.","'randomArrayElement' is defined but never used.","no-global-assign","no-unsafe-negation"]